<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>UsdPhysics Schema</title>
    <detaileddescription>
<para><bold>Rigid Body Physics in USD Proposal.</bold></para><sect1 id="index_1purpose_and_scope">
<title>Purpose and Scope</title>
<para>With the rising adoption of USD across domains, it is being applied in a much broader set of applications than originally envisioned. One such application is the authoring, interchange and delivery of interactive 3D graphics content. Examples for such content in the consumer space include computer games and 3D web applications. Such applications often include real-time physics simulations to allow realistic user interaction with virtual objects. In professional and academic applications, there are a number of use cases in e.g. mechanical engineering, architecture, artificial intelligence and robotics where vehicles or robots are designed, tested and trained in simulation. Our schema proposal is to extend USD to represent the data needed by such simulation applications.</para><para>The space of all types of simulation is enormous. We see this proposal as version one of a sequence of extensions that start with the most basic and common concepts, and we intend to incrementally add more capabilities in the future. This proposal focuses specifically on rigid body physics.</para></sect1>
<sect1 id="index_1overall_design">
<title>Overall Design Concerns</title>
<para>This first proposal will concern only rigid body simulations. Rigid body simulations are the most broadly applicable category we could identify, with common and long standing uses across all disciplines described above.</para><sect2 id="index_1rigid_body">
<title>Rigid Body Simulation Primer</title>
<para>Fundamentally, rigid body simulators take as input a list of rigid bodies and a list of constraints. Given the state of the bodies at the current time, they compute the updated state of the bodies a moment in time later, with the general desire being that the bodies’ movement while constrained by the constraints obeys the laws of physics. One can invoke a sequence of such simulation updates to generate an animation.</para><para>A rigid body can be described by its pose (position and orientation in a well defined frame of reference), as well as its mass distribution (specified by a center of mass position, total mass, and an inertia tensor). The body will also have a velocity (linear and angular vectors). Pose and velocity are both inputs and outputs of the simulation update.</para><para>Constraints can take many forms, but fall primarily into two categories:</para><para><itemizedlist>
<listitem><para><bold>Explicit constraints</bold>, often called joints, which create a fixed relationship between two rigid bodies. One example is a requirement that one body never rotate relative to the other body, even if relative translation is possible.</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para><bold>Implicit constraints</bold>, most commonly contacts, which are generally created ‘behind the scenes’ by the simulator to ensure that e.g. solid objects do not pass through each other. For the simulator to derive these constraints, each body must be provided with a collision representation (called ‘collision shape’ or ‘collider’) and physical material properties.</para></listitem>
</itemizedlist>
Simulations often share a set of global parameters that influence the simulation of all bodies. It is generally possible to simultaneously create multiple simulations, each with their own set of parameter settings.</para></sect2>
<sect2 id="index_1usd_implementation">
<title>USD Implementation</title>
<sect3 id="index_1disambiguation">
<title>Disambiguation</title>
<para>First, it is clear that some terminology commonly used by the physics simulation community, such as ‘scene’, ‘joint’, and ‘material’ have different meanings than in VFX and as already used by USD, so we decided to prefix all of our schema classes with ‘Physics’ and also make use of namespacing to avoid any ambiguity.</para></sect3>
<sect3 id="index_1fundamental_editing">
<title>Fundamental Editing Capabilities</title>
<para>A primary assumption in designing this schema was that one of the most common use cases will be to add physics behavior to existing USD content. Furthermore, the conventional wisdom was that to maximize the performance of USD implementations, it is best to avoid inflating the number of USD objects in a scene. Thus we believe the best approach is to attach new API schemas that contain physics attributes to existing USD objects whenever this makes sense. In rare cases there is no object already available to which simulation attributes can be attached in a rational manner, and in these cases we decided to create new USD IsA schemas.</para><para>It is vital that any operation to add physics can also be undone; we will be leveraging the recently added RemoveAPI() capability.</para><para>Similarly, in editor use cases it is a common capability to temporarily be able to mute/disable properties, without deleting them outright. Deletion has the disadvantage that the stored settings are lost completely. USD allows entire objects to deactivate via an active flag, but this is not possible per-API. In a few cases muting behavior is a really common use case. For these cases we have defined a boolean enable attribute. (Note that we initially wanted to have the enable flag in a base class for the classes that need it, but this creates problems when multiple enableable APIs are applied to an object. In this case USD only creates a single shared enable flag, which is not what we want.)</para></sect3>
<sect3 id="index_1physics_scenes">
<title>Physics Scenes</title>
<para>As discussed above, we wish to enable multiple independent physics simulations within a single USD stage. We found the best way to do this is to create a PhysicsScene class. It was proposed to use the USD layers concept to partition physics into separate scenes, but we were concerned that the stage concept is already so overused for many different things (e.g. collaboration, version control) that we would prefer to avoid stretching it to yet another use case. In case there are multiple scenes in a stage, bodies are assigned to specific scenes using a rel from body to scene. If there is only one unique scene, an explicit rel is unnecessary, and bodies are assumed to be associated with the singleton scene. It is not possible to put a single body into multiple scenes as they would all be trying to influence and write conflicting information into such a body.</para><para>Scenes can define a gravity vector attribute which accelerates all contained bodies appropriately. Gravity is provided as a separate direction vector and magnitude. This is so that a default direction (negative stage up axis) and a default magnitude (earth gravity) can be requested independently.</para></sect3>
<sect3 id="index_1types">
<title>Types</title>
<para>USD differentiates between base and role value types. We tried to use the available role types whenever applicable. For example, a velocity is a vector3f rather than a float3.</para><para>We chose to use single rather than double precision floats as widely available real time physics simulation software universally use single precision types for best performance, and the use of double or extended precision is only warranted for positions in extremely large spaces, which is already covered by making use of USD’s built-in xform type.</para></sect3>
<sect3 id="index_1units">
<title>Units</title>
<para>In terms of units, physics makes use of USD’s established concepts of distance and time, and also adds the concept of mass. All of the physical quantities we use can be decomposed into a product of these three basic types. USD does not prescribe units for distance and time. It however has the concept of metersPerUnit and timeCodesPerSecond metadata which makes it possible to scale content authored at different scales correctly relative to each other when bringing them into a shared scene. This physics extension respects this distance and time capability with physics, and adds a kilogramsPerUnit metadata which remains consistent with the SI system.</para><para>All one dimensional angular values are specified in degrees for reasons of content creator intuition and consistency with existing degree values in USD like camera FOV or Euler rotations.</para><para>In the schema we indicate the units for each specified quantity as an expression using the terms ‘distance’, ‘degrees’, ‘mass’ and ‘time’ as defined above. A USD stage can be composed by referencing a number of USD files each using their own distinct unit conversion metadata. This means that before simulation, all values can be converted using the respective unit conversion metadata into an implementation dependent common system of units before they can be simulated.</para><para>Similarly, any simulation outputs can be converted back into their original units before being written back to USD.</para></sect3>
<sect3 id="index_1default_values">
<title>Default Values</title>
<para>Some problems came up while specifying this schema in connection with default values. First, there is a recent change to USD that eliminates the possibility of not creating attributes for schema APIs, which used to be a convenient way to denote a request to use a default value for the attribute. We now instead specify default values explicitly, typically sentinel values that lie outside of the range of legal values for a particular attribute. For example, if an attribute is normally required to be non-negative, we use -1.0 to request a certain default behavior. Sometimes the attribute can use the entire floating point range, in which case we reserve what is effectively +/- infinity at the edges of this range as sentinels. We will use the floating point ‘inf’ literal which USD supports in files and schemas to denote this. We document such default sentinel behavior on a case by case basis in the schema.</para></sect3>
<sect3 id="index_1rigid_bodies">
<title>Rigid Bodies</title>
<para>We represent physics rigid bodies using the PhysicsRigidBodyAPI, which can be applied to any UsdGeomXformable. UsdGeomXformable is the suitable base class as it provides a placement in space via the xform which is also a fundamental property of physics bodies.</para><para>Rigid bodies have linear and angular velocity attributes that are specified in local space, to be consistent with velocities in point instancers and a node’s xform.</para><para>Bodies can specify a simulationOwner scene rel for the aforementioned multi-scene simulation scenario.</para></sect3>
<sect3 id="index_1interaction_with_usd">
<title>Interaction with the USD hierarchy</title>
<para>If a node in a USD scene graph hierarchy is marked with PhysicsRigidBodyAPI, the behavior is such that all children of the marked node are assumed to be part of this rigid body, and move rigidly along with the body. This is consistent with the common behavior one expects during hand-animation of a sub-tree. If aggregate properties of the entire rigid body must be computed, such as total mass or the entirety of its collision volume, then the contents of the entire subtree are considered.</para><para>Note that it is of course permitted to change/animate the transforms in such a sub-tree, in which case any derived quantities in the physics engine such as center of mass or relative shape poses will be updated. Such animation will however not generate momentum. For example, rapidly animating rigid portions of Luxo Jr. will not cause the lamp to jump, since to compute such behavior we would need to capture the relative masses of multiple independent portions of the lamp, which is not possible if the whole is treated as a single rigid assembly. The correct approach would be to model each of the rigid portions of the lamp as independent rigid bodies, and connect these with joints, which we will discuss later.</para><para>It is not possible to have nested bodies. PhysicsRigidBodyAPIs applied to anything in the subtree under a node that already has a PhysicsRigidBodyAPI are ignored. An exception is if a prim has an resetXformStack op. In this case it ignores rigid body parenting, and a rigid body API can then be used to make it dynamic.</para></sect3>
<sect3 id="index_1rb_sleep">
<title>Sleep</title>
<para>To make large terrestrial simulations possible where, generally, all bodies eventually fall to the ground and come to rest, most rigid body simulation software have the concept of ‘sleeping’ these bodies to improve performance. This means that interactions cease to be updated when an equilibrium state is reached, and start to be updated again once the equilibrium state has somehow been disturbed. It is also possible to start off simulations in a sleeping state. We provide PhysicsRigidBodyAPI:startsAsleep to support this. We have considered exposing the runtime sleep state of each body in the simulation so that it would be visible to USD when the simulation deactivated a body, and to let USD force a body to sleep during simulation. We decided against this since the precise deactivation rules are an implementation detail that can vary significantly between simulations, so we prefer to keep this as a hidden implementation detail for the time being.</para></sect3>
<sect3 id="index_1kinematic_bodies">
<title>Kinematic Bodies</title>
<para>In games and VFX it is often desirable to have an animator take full control over a body, even as it interacts with other physics driven bodies. We call such bodies ‘kinematic’. Kinematic bodies still ‘pull on’ joints and ‘push on’ touching rigid bodies, but their xform is only read, but not written, by the physics simulator, letting the animation system write their xforms. We support such bodies using the PhysicsRigidBodyAPI:kinematicEnabled attribute. Kinematic bodies are not exactly the same thing as an animated static body with a collider: The simulation infers a continuous velocity for the kinematic body from the keyframing, and this velocity will be imparted to dynamic bodies during collisions.</para></sect3>
<sect3 id="index_1animation_of_attributes">
<title>Animation of Attributes</title>
<para>We worked with the assumption that every attribute on every class that is not explicitly marked with &quot;uniform&quot; can be animated. Obviously erratic changing of some parameters could make some simulations explode in practice, but we believe this is highly implementation dependent and not a reason to generally forbid attribute animation.</para></sect3>
<sect3 id="index_1body_mass_properties">
<title>Body Mass Properties</title>
<para>We opted to decouple mass properties from PhysicsRigidBodyAPI and place them in a separate PhysicsMassAPI. PhysicsMassAPI is not required in most common cases where the mass properties of an object can be derived from collision geometry (discussed further down in this document) and the PhysicsMaterialAPI. Most commonly, PhysicsMassAPI is applied in addition to PhysicsRigidBodyAPI.</para><para>Unlike PhysicsRigidBodyAPI, it is also possible to apply PhysicsMassAPI multiple times in a USD scene graph subtree, in order to make it possible to accumulate the mass of rigid components.</para><para>The mass of an object may be specified in multiple ways, and several conflicting settings are resolved using a precedence system that will initially seem rather complex yet but is actually intuitive and practical:</para><para><itemizedlist>
<listitem><para>Parents’ explicit total masses override any mass properties specified further down in the subtree.</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Density has lower precedence than mass, so explicit mass always overrides implicit mass that can be computed from volume and density.</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>A density in a child overrides a density specified in a parent for all of the subtree under the child.</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>A density specified via PhysicsMassAPI, even if it is inherited from a node higher in the tree, overrides any density specified via a material (see PhysicsMaterialAPI later in this document).</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Implicit mass at any node is the computed volume of collision geometry at that node times the locally effective density, plus the implicit masses of all children in the subtree.</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Density is assumed to be 1000.0 kg/m3 (approximately the density of water) for volume computation when no other density is specified locally, or in rel-ed materials either locally or higher up in the tree, and this value is converted into the collider’s native units prior to being used for mass computation.</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Mass is assumed to be 1.0 in the mass units used when none is provided explicitly, and there are no collision volumes to derive from.</para></listitem>
</itemizedlist>
Since implementing this rule set is maybe nontrivial, we plan to make the pseudocode of a mass computation system available that relies on the underlying physics system to compute the volume of collision geometry.</para></sect3>
<sect3 id="index_1collision_shapes">
<title>Collision Shapes</title>
<para>Our design for collision shapes defines a PhysicsCollisionAPI that may be attached to objects of type USDGeomGprim representing graphics geometry. Specifically, we suggest the support of USDGeomCapsule, USDGeomCone, USDGeomCube, USDGeomCylinder, USDGeomSphere and USDGeomMesh, though the precise set of supported geoms might be implementation specific. Note also that some implementations might support some of these shapes using potentially faceted convex approximations.</para><para>As we have perhaps already alluded to, a subtree under a PhysicsRigidBodyAPI node may contain multiple collision shape nodes (or ‘colliders’) that are required to resolve the motion of the body as it touches other bodies. For example, a teapot is a single rigid body (the top level node is marked with PhysicsRigidBodyAPI), but it may be composed of multiple Mesh and other Geoms at and under this node. Each of these parts can gain a PhysicsCollisionAPI which instructs the system to make this shape’s geom into a collider for the purposes of physics simulation.</para><para>It is also possible to have PhysicsCollisionAPIs on nodes that are not under a PhysicsRigidBodyAPI. These are treated as static colliders <ndash/> shapes that are not moved by physics, but they can still collide with bodies, at which point they are interpreted as having zero velocity and infinite mass.</para><para>Note that for this static collider case when we do not have a relevant PhysicsRigidBodyAPI, it is possible for the PhysicsCollisionAPI to specify a simulationOwner scene. If there is a PhysicsRigidBodyAPI that this collider belongs to, the collider’s simulation owner attribute is ignored.</para><para>Note that since according to USD rules, USDGeomGprims must be generally be leaf nodes, and because PhysicsCollisionAPI can only be applied to USDGeomGprim, it means that there is no opportunity to inherit PhysicsCollisionAPI attributes down the scene graph. If a mesh is composed of submeshes, all of the submeshes are considered to be part of the collider.</para><para>It is worth pointing out that this present design does have the drawback that it is not possible to add multiple colliders to a single geom object directly. To add multiple colliders one must create a parent Xform (which receives the PhysicsRigidBodyAPI), and then add the original geom as a child, and add any additional colliders as additional children. This is a bit more invasive than we would prefer, but the only alternative would be to make colliders Is-A schemas rather than APIs, which there was a desire to avoid to prevent the number of USD objects from increasing a great deal.</para></sect3>
<sect3 id="index_1mesh_into_shapes">
<title>Turning Meshes into Shapes</title>
<para>Simple USD Prims like Sphere, Cylinder, Cube, Cone and Capsule are generally able to be used for physics simulation directly with the simple addition of a PhysicsCollisionAPI. USDMesh is a bit tricky because the state of the art in simulating arbitrary meshes in real time comes with some tradeoffs that users generally want control over. To support this, we allow PhysicsMeshCollisionAPI to be applied to USDGeomMeshes only, alongside the PhysicsCollisionAPI. This API has an approximation attribute that lets the user choose between no approximation (generally lowest performance), a simplified mesh, a set of convex hulls, a single convex hull, a bounding box or a bounding sphere. If an implementation does not support a particular kind of approximation, it is recommended that it falls back to the most similar supported option.</para><para>One may specify a collision mesh explicitly (for example one that was processed by a particular decimator) by adding the custom collider mesh as a sibling to the original graphics mesh, set it to ‘guide’ so it does not render, and apply PhysicsCollisionAPI and PhysicsMeshCollisionAPI to it specifying no approximation.</para></sect3>
<sect3 id="index_1physics_materials">
<title>Physics Materials</title>
<para>Just like graphics, physics uses material properties. These are primarily used to inform friction and collision restitution behavior, in addition to being one of several ways to specify object density as discussed earlier. All these properties are stored in the PhysicsMaterialAPI, which can be applied to a USD Material node as we believe it to be practical to add physics properties to an established USD material library.</para><para>PhysicsMaterials are bound in the same way as graphics materials using material:binding, either with no purpose qualifier or with a specific ‘physics’ purpose. Note that this approach also permits using binding different materials to GeomSubsets. Not all physics simulations support different materials per GeomSubset, and it&apos;s possible that all but one subset per collider will be ignored by the implementation.</para><para>The unitless coefficients dynamicFriction and staticFriction are defined by the Coulomb friction model. The coefficient of restitution is the ratio of the final to initial relative velocity between two objects after they collide. These three properties actually should be defined for each combination of two materials, but this is generally considered impractical. Common practice in real time physics is to define them on each material and then to use a simple formula to combine them, for example by taking the product or the minimum. Currently the default behavior we propose is to average the values, which is the default behavior in popular real time game engines. In the future other combine modes should be exposed.</para></sect3>
<sect3 id="index_1plane_shapes">
<title>Plane Shapes</title>
<para>Implicit plane shapes are a very common physics primitive used primarily for testing simple simulations. There are plans to add a Plane class to USD as a USDGeomGPrim. We look forward to supporting such plane shapes as static colliders when they become available.</para></sect3>
<sect3 id="index_1collision_filtering">
<title>Collision Filtering</title>
<para>Even in the simplest practical applications, the need to ignore some collisions occurs often. One might need the sword of a game character to pass through an enemy rather than to bounce off, while wanting it to bounce off walls, for example.</para><para>We define a CollisionGroup as an IsA schema with a UsdCollectionAPI applied, that defines the membership of colliders (objects with a PhysicsCollisionAPI) in the group. Each group also has a list of rel-s to other groups (potentially including itself) with which it needs to not collide. Colliders not in any CollisionGroup collide with all other colliders in the scene.</para></sect3>
<sect3 id="index_1pairwise_filtering">
<title>Pairwise Filtering</title>
<para>Sometimes group based filtering is insufficiently powerful to take care of some filtering special cases. One would for example set up group based filtering such that bodies of human characters collide against extremities like arms and legs, generally assuming that these arms and legs belong to different humans than the bodies. One however often doesn’t want the extremities of a particular human to collide with its own body, which is hard to avoid during a lot of constant close proximity movement. To cover this case we have the FilteringPairsAPI, which holds a list of relationships to other objects with which collisions are explicitly disabled. This pairwise filtering has precedence over group based filtering.</para><para>The FilteringPairsAPI can be applied to objects with a PhysicsRigidBodyAPI, PhysicsCollisionAPI, or PhysicsArticulationAPI.</para><para>It is sufficient to have a rel from an object A to an object B, to get the filtering behavior. In this case the backwards rel from B to A is implicit and not necessary.</para></sect3>
<sect3 id="index_1joints">
<title>Joints</title>
<para>Joints are generally fixed attachments that can represent the way a drawer is attached to a cabinet, a wheel to a car, or links of a robot to each-other. Here we try to focus on a set of capabilities that are common to most simulation packages and sufficiently expressive for a large number of applications.</para><para>Mathematically, jointed assemblies can be modeled either in maximal (world space) or reduced (relative to other bodies) coordinates. Both representations have pros and cons. We are proposing a USD representation that will work with both approaches.</para></sect3>
<sect3 id="index_1joint_reference_frames">
<title>Joint Reference Frames</title>
<para>Our joint base type is the IsA class PhysicsJoint. Joints don’t necessarily have a single unique Xform in space, rather, they are defined by two distinct frames, one relative to each of the two bodies which they connect.</para><para>These two frames might not work out to be the same position and orientation in world space because of either the permitted relative movement of the joint (think of a car suspension moving up and down: the joint frame of the suspension is constant relative to both the car body and the car axle, yet the axle and undercarriage move relative to each other) or the error of approximate simulations that can permit the joint to slightly pull apart when subjected to significant forces or velocities.</para><para>Because of these dual transforms, it did not make sense for us to derive PhysicsJoint from Xformable, which just has one Xform. We could have created an asymmetrical solution where the secondary xform is added on, or split the joint object into two separate joint frames that are parented into the scene graph and are then somehow pairwise cross referenced, but we opted to go with an entirely new class that has all the information we need in a symmetrical fashion.</para></sect3>
<sect3 id="index_1jointed_bodies">
<title>Jointed Bodies</title>
<para>A joint defines rels to two Xformables. Simulation of the joint is possible if at least one of these has a PhysicsRigidBodyAPI on it, or on an ancestor. If either rel is not defined, it is treated as equivalent to attaching to the static world frame, though it is recommended to always work with two well defined Xformables.</para><para>The joint space relative to each body is a translation and orientation only, scaling is not supported. (This is a general tension between graphics and physics. In the real world it is generally not possible to scale real objects and simulations do not tend to support scaling during rigid body simulation). For this reason we don’t use a general USD xform that is too flexible for our needs, but rather a separate position and orientation quaternion. (Note however that this local joint space is fixed in the node’s local space, which of course CAN be scaled using the node’s own Xform scaling. This means that if a doorknob is attached to a door at a particular position, it will continue to appear in the same correct position on the door regardless of how the door is scaled, without having to adjust the joint position.)</para><para>Note that in general we desire to have the two joint frames line up in world space, at least along their constrained degrees of freedom. This condition can be violated if either body is moved in world space, either by changing its own or one of its parents’ transforms, or if either body rels is changed. As a result it is desirable to recompute the joint frames when the connected bodies or their world space transforms have changed.</para></sect3>
<sect3 id="index_1joint_collision_filtering">
<title>Joint Collision Filtering</title>
<para>It is common practice to disable collisions between jointed objects so that their collision shapes don’t interfere, and this is therefore the default behavior that can be changed using the joint’s collisionEnabled attribute. This only applies to joints with two explicit bodies: a joint to the world does NOT disable collisions between the body and the world.</para></sect3>
<sect3 id="index_1breaking_disabling_joints">
<title>Breaking and Disabling Joints</title>
<para>One property we believe can be practical for all joints is that they can break when sufficient force is applied. For example a door can be ripped off its hinges. This can be modeled using the breakForce and breakTorque attributes.</para><para>Joints can entirely be temporarily disabled just like rigid bodies or colliders. Contrary to breaking, which is a (within a simulation run irreversible) simulated behavior, disabling is a request to not simulate the joint at all.</para></sect3>
<sect3 id="index_1joint_subtypes">
<title>Joint Subtypes</title>
<para>Joints have a number of possible derived types that allow for specific types of joints, however, it can also be used to represent a generic configurable joint, so in that sense it is not an abstract type.</para><para>The subtypes PhysicsSphericalJoint, PhysicsRevoluteJoint and PhysicsPrismaticJoint both define a primary axis (Following the USD axis definition pattern established in e.g. GeomCapsule and GeomCylinder) and a top and bottom motion limit along it.</para><para>PhysicsDistanceJoint defines a min and max distance between the attachment points. The PhysicsFixedJoint has no additional properties and simply locks all relative degrees of freedom.</para></sect3>
<sect3 id="index_1limits_drives">
<title>Joint Limits and Drives</title>
<para>Instead of using one of the predefined joint subtypes, it is also possible to compose a custom joint from a set of limits and drives. Limits and drives are multi-apply schemas, so one can apply multiple instances, one for each degree of freedom. The degree of freedom is specified via the TfToken (effectively a string, one of &quot;transX&quot;, &quot;transY&quot;, &quot;transZ&quot;, &quot;rotX&quot;, &quot;rotY&quot;, &quot;rotZ&quot;, &quot;distance&quot;, that is postpended after the class name.)</para><para>The limit API further contains optional low and high limit attributes.</para><para>The drive API allows joints to be motorized along degrees of freedom. It may specify either a force or acceleration drive (The strength of force drives is impacted by the mass of the bodies attached to the joint, an acceleration drive is not). It also has a target value to reach, and one can specify if the target is a goal position or velocity. One can limit the maximum force the drive can apply, and one can specify a spring and damping coefficient.</para><para>The resulting drive force or acceleration is proportional to stiffness (targetPosition - p) +damping (targetVelocity - v) where p is the relative pose space motion of the joint (the axial rotation of a revolute joint, or axial translation for a prismatic joint) and v is the rate of change of this motion.</para><para>For all limits that specify ranges, a &quot;low&quot; limit larger than the &quot;high&quot; limit means the joint motion along that axis is locked.</para></sect3>
<sect3 id="index_1articulations">
<title>Articulations</title>
<para>Above we did say that we also support reduced coordinate joints, which require some additional specification. We decided to do this with a minimal extension of the above maximal joints. Any node of the USD scene graph hierarchy may be marked with an ArticulationRootAPI. This informs the simulation that any joints found in the subtree should preferentially be simulated using a reduced coordinate approach. For floating articulations (robotics jargon for something not bolted down, e.g. a wheeled robot or a quadcopter), this API should be used on the root body (typically the central mass the wheels or rotors are attached to), or a direct or indirect parent node. For fixed articulations (robotics jargon for e.g. a robot arm for welding that is bolted to the floor), this API can be on a direct or indirect parent of the root joint which is connected to the world, or on the joint itself. If there are multiple qualifying bodies or joints under an ArticulationRootAPI node, each is made into a separate articulation root.</para><para>This should in general make it possible to uniquely identify a distinguished root body or root joint for the articulation. From this root, a tree of bodies and joints is identified that is not to contain loops (which may be closed by joint collections). If loops are found, they may be broken at an arbitrary location. Alternatively, a joint in the loop may use its excludeFromArticulation attribute flag to denote that it wishes to remain a maximal joint, and at this point the loop is then broken.</para></sect3>
</sect2>
<sect2 id="index_1examples">
<title>Examples</title>
<sect3 id="index_1box_on_box">
<title>Box on Box</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Very<sp/>basic<sp/>example<sp/>for<sp/>using<sp/>the<sp/>Physics<sp/>USD<sp/>schema.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Should<sp/>show<sp/>a<sp/>box<sp/>shaped<sp/>rigid<sp/>body<sp/>that<sp/>will<sp/>fall<sp/>on<sp/>a<sp/>flat<sp/></highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#static<sp/>box<sp/>when<sp/>simulated.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#new<sp/>mass<sp/>scaling</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#Scene<sp/>mandatory<sp/>for<sp/>simulation.<sp/><sp/>By<sp/>If<sp/>rigid<sp/>bodies<sp/>don&apos;t<sp/>explicitly</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#specify<sp/>a<sp/>scene,<sp/>they<sp/>implicitly<sp/>belong<sp/>to<sp/>this<sp/>one.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#by<sp/>default,<sp/>the<sp/>scene<sp/>will<sp/>have<sp/>earth<sp/>gravity.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;PhysicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#This<sp/>cube<sp/>becomes<sp/>a<sp/>rigid<sp/>body<sp/>and<sp/>a<sp/>collider<sp/>thanks<sp/>to<sp/>two<sp/>applied<sp/></highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#schemas.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;BoxActor&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#optional<sp/>non<sp/>zero<sp/>starting<sp/>velocities.<sp/><sp/></highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#All<sp/>other<sp/>physics<sp/>behavior<sp/>is<sp/>left<sp/>at<sp/>defaults.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector3f<sp/>physics:velocity<sp/>=<sp/>(2,<sp/>1,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector3f<sp/>physics:angularVelocity<sp/>=<sp/>(1,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>500)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#This<sp/>cube<sp/>becomes<sp/>a<sp/>static<sp/>ground<sp/>box<sp/>because<sp/>it<sp/>only<sp/>has<sp/>a<sp/>collider</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#but<sp/>no<sp/>rigid<sp/>body.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Ground&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.5,<sp/>0.5,<sp/>0.5)]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#scale<sp/>the<sp/>cube<sp/>to<sp/>be<sp/>flat</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(750,<sp/>750,<sp/>10)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#just<sp/>to<sp/>make<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>scene<sp/>render<sp/>pretty,<sp/>not<sp/>relevant<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>physics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="index_1box_on_quad">
<title>Box on Quad</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#More<sp/>advanced<sp/>example<sp/>showing<sp/>mesh<sp/>collisions</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#and<sp/>center<sp/>of<sp/>mass<sp/>offset.<sp/><sp/>We<sp/>expect<sp/>to<sp/>have<sp/>the</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#quad<sp/>be<sp/>represented<sp/>as<sp/>a<sp/>convex<sp/>mesh<sp/>and<sp/>have<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#cube<sp/>come<sp/>to<sp/>rest<sp/>on<sp/>it,<sp/>balanced<sp/>on<sp/>one<sp/>of<sp/>its<sp/>corners.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;PhysicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#Added<sp/>a<sp/>mass<sp/>API<sp/>so<sp/>we<sp/>can<sp/>offset<sp/>the<sp/>center<sp/>of<sp/>mass.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;BoxActor&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsMassAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#explicit<sp/>mass</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>physics:mass<sp/>=<sp/>10.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#offset<sp/>center<sp/>of<sp/>mass<sp/>so<sp/>the<sp/>cube<sp/>settles<sp/>on<sp/>its<sp/>corner</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point3f<sp/>physics:centerOfMass<sp/>=<sp/>(40.0,<sp/>40.0,<sp/>40.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>500)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#A<sp/>quad<sp/>mesh<sp/>that<sp/>serves<sp/>as<sp/>the<sp/>ground.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Mesh<sp/></highlight><highlight class="stringliteral">&quot;Ground&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsMeshCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#approximate<sp/>with<sp/>a<sp/>convex<sp/>hull,<sp/>if<sp/>we<sp/>remove<sp/>this,<sp/>it<sp/>will</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#be<sp/>used<sp/>directly</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token<sp/>physics:approximation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;convexHull&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doubleSided<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>faceVertexCounts<sp/>=<sp/>[4]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>faceVertexIndices<sp/>=<sp/>[0,<sp/>1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal3f[]<sp/>normals<sp/>=<sp/>[(0,<sp/>0,<sp/>1),<sp/>(0,<sp/>0,<sp/>1),<sp/>(0,<sp/>0,<sp/>1),<sp/>(0,<sp/>0,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point3f[]<sp/>points<sp/>=<sp/>[(-1,<sp/>1,<sp/>0),<sp/>(1,<sp/>1,<sp/>0),<sp/>(1,<sp/>-1,<sp/>0),<sp/>(-1,<sp/>-1,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.5,<sp/>0.5,<sp/>0.5)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoord2f[]<sp/>primvars:st<sp/>=<sp/>[(0,<sp/>1),<sp/>(1,<sp/>1),<sp/>(1,<sp/>0),<sp/>(0,<sp/>0)]<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;varying&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(750,<sp/>750,<sp/>750)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="index_1spheres_with_material">
<title>Spheres with Materials</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Shows<sp/>two<sp/>spheres,<sp/>one<sp/>with<sp/>high</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#and<sp/>one<sp/>with<sp/>low<sp/>bounce,<sp/>by<sp/>using<sp/>materials.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Also<sp/>uses<sp/>a<sp/>trimesh<sp/>ground<sp/>quad.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#new<sp/>mass<sp/>scaling</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;PhysicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Sphere<sp/></highlight><highlight class="stringliteral">&quot;RegularSphere&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>material:binding:physics<sp/>=<sp/>&lt;/World/Looks/RegularMaterial&gt;<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindMaterialAs<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;weakerThanDescendants&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>500)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(25,<sp/>25,<sp/>25)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Sphere<sp/></highlight><highlight class="stringliteral">&quot;BouncySphere&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>material:binding:physics<sp/>=<sp/>&lt;/World/Looks/BouncyMaterial&gt;<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindMaterialAs<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;weakerThanDescendants&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.8784314,<sp/>0.2117647,<sp/>0.1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(300,<sp/>0,<sp/>500)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(25,<sp/>25,<sp/>25)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Mesh<sp/></highlight><highlight class="stringliteral">&quot;Ground&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>faceVertexCounts<sp/>=<sp/>[4]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>faceVertexIndices<sp/>=<sp/>[3,<sp/>2,<sp/>1,<sp/>0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal3f[]<sp/>normals<sp/>=<sp/>[(0,<sp/>0,<sp/>1),<sp/>(0,<sp/>0,<sp/>1),<sp/>(0,<sp/>0,<sp/>1),<sp/>(0,<sp/>0,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point3f[]<sp/>points<sp/>=<sp/>[(-1,<sp/>1,<sp/>0),<sp/>(1,<sp/>1,<sp/>0),<sp/>(1,<sp/>-1,<sp/>0),<sp/>(-1,<sp/>-1,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.5,<sp/>0.5,<sp/>0.5)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texCoord2f[]<sp/>primvars:st<sp/>=<sp/>[(0,<sp/>1),<sp/>(1,<sp/>1),<sp/>(1,<sp/>0),<sp/>(0,<sp/>0)]<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;varying&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(750,<sp/>750,<sp/>750)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Scope<sp/></highlight><highlight class="stringliteral">&quot;Looks&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>Material<sp/></highlight><highlight class="stringliteral">&quot;RegularMaterial&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsMaterialAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>restitution<sp/>=<sp/>0.1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>Material<sp/></highlight><highlight class="stringliteral">&quot;BouncyMaterial&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsMaterialAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>restitution<sp/>=<sp/>0.8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="index_1group_filtering">
<title>Group Filtering</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Shows<sp/>two<sp/>boxes<sp/>that<sp/>collide<sp/>with<sp/>a<sp/>ground<sp/>box</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#but<sp/>do<sp/>not<sp/>collide<sp/>with<sp/>each<sp/>other<sp/>thanks<sp/>to</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#group<sp/>based<sp/>filtering.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;PhysicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Box1&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Box2&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>100)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsCollisionGroup<sp/></highlight><highlight class="stringliteral">&quot;DynamicGroup&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;CollectionAPI:colliders&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>rel<sp/>collection:colliders:includes<sp/>=<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/World/Box1&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/World/Box2&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>rel<sp/>physics:filteredGroups<sp/>=<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/World/DynamicGroup&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Ground&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.5,<sp/>0.5,<sp/>0.5)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(750,<sp/>750,<sp/>10)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="index_1pair_filtering">
<title>Pair Filtering</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;PhysicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Box1&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Box2&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsFilteredPairsAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>rel<sp/>physics:filteredPairs<sp/>=<sp/>&lt;/World/Box1&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.4117647,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>100)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;Ground&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.5,<sp/>0.5,<sp/>0.5)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(750,<sp/>750,<sp/>10)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="index_1joint_example">
<title>Joint</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Shows<sp/>a<sp/>joint<sp/>which<sp/>is<sp/>driven<sp/>to<sp/>rotate</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#around<sp/>the<sp/>vertical<sp/>axis<sp/>with<sp/>a<sp/>constant</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#speed.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;physicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>gravity<sp/>=<sp/>(0,<sp/>0,<sp/>-1000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;StaticBox&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.64705884,<sp/>0.08235294,<sp/>0.08235294)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>xformOp:orient<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(0.1,<sp/>1,<sp/>0.1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>1000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:orient&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;DynamicBox&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.64705884,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>xformOp:orient<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(0.1,<sp/>1,<sp/>0.1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>120,<sp/>1000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:orient&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#joint<sp/>with<sp/>5<sp/>limits<sp/>and<sp/>one<sp/>drive</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsJoint<sp/></highlight><highlight class="stringliteral">&quot;D6Joint&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsLimitAPI:transX&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsLimitAPI:transY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsLimitAPI:transZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsLimitAPI:rotX&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsLimitAPI:rotY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsDriveAPI:rotZ&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>physics:body0<sp/>=<sp/>&lt;/World/StaticBox&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>physics:body1<sp/>=<sp/>&lt;/World/DynamicBox&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:rotX:physics:high<sp/>=<sp/>-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:rotX:physics:low<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:rotY:physics:high<sp/>=<sp/>-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:rotY:physics:low<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:transX:physics:high<sp/>=<sp/>-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:transX:physics:low<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:transY:physics:high<sp/>=<sp/>-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:transY:physics:low<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:transZ:physics:high<sp/>=<sp/>-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>limit:transZ:physics:low<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>drive:rotZ:physics:targetVelocity<sp/>=<sp/>10.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>drive:rotZ:physics:damping<sp/>=<sp/>9999.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point3f<sp/>physics:localPos0<sp/>=<sp/>(0,<sp/>60,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point3f<sp/>physics:localPos1<sp/>=<sp/>(0,<sp/>-60,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>physics:localRot0<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>physics:localRot1<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect3>
<sect3 id="index_1distance_joint_example">
<title>Distance Joint</title>
<para><programlisting><codeline><highlight class="preprocessor">#usda<sp/>1.0</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#Shows<sp/>a<sp/>dynamic<sp/>box<sp/>connected</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#to<sp/>a<sp/>fixed<sp/>box<sp/>with<sp/>a<sp/>distance<sp/>joint.</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal">(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPrim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endTimeCode<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metersPerUnit<sp/>=<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>startTimeCode<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timeCodesPerSecond<sp/>=<sp/>24</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>upAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>kilogramsPerUnit<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">def<sp/>Xform<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>PhysicsScene<sp/></highlight><highlight class="stringliteral">&quot;physicsScene&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;StaticBox&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.64705884,<sp/>0.08235294,<sp/>0.08235294)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>xformOp:orient<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(0.1,<sp/>1,<sp/>0.1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>0,<sp/>1000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:orient&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Cube<sp/></highlight><highlight class="stringliteral">&quot;DynamicBox&quot;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>apiSchemas<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;PhysicsCollisionAPI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsRigidBodyAPI&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color3f[]<sp/>primvars:displayColor<sp/>=<sp/>[(0.2784314,<sp/>0.64705884,<sp/>1)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>velocity<sp/>=<sp/>(0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>xformOp:orient<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>xformOp:scale<sp/>=<sp/>(0.1,<sp/>1,<sp/>0.1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>120,<sp/>1000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:orient&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;xformOp:scale&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>DistancePhysicsJoint<sp/></highlight><highlight class="stringliteral">&quot;DistanceJoint&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>physics:body0<sp/>=<sp/>&lt;/World/StaticBox&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>physics:body1<sp/>=<sp/>&lt;/World/DynamicBox&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>physics:localPos0<sp/>=<sp/>(0,<sp/>60,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float3<sp/>physics:localPos1<sp/>=<sp/>(0,<sp/>-60,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>physics:localRot0<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quatf<sp/>physics:localRot1<sp/>=<sp/>(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>physics:maxDistance<sp/>=<sp/>50</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>physics:minDistance<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SphereLight<sp/></highlight><highlight class="stringliteral">&quot;SphereLight&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>30000</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>150</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double3<sp/>xformOp:translate<sp/>=<sp/>(650,<sp/>0,<sp/>1150)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;xformOp:translate&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></sect3>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
