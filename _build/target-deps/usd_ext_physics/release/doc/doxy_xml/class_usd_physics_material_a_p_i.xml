<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_usd_physics_material_a_p_i" kind="class" prot="public">
    <compoundname>UsdPhysicsMaterialAPI</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="material_a_p_i_8h" local="no">materialAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_physics_material_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::SingleApplyAPI</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="65" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_physics_material_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="136" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1a02a3d09fc775b0e9ad0c1b0a362c8a61" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsMaterialAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdPhysicsMaterialAPI</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref> on UsdPrim <computeroutput>prim</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_physics_material_a_p_i_1afe71a0ceb850b115c7e21f08ced4faa7" kindref="member">UsdPhysicsMaterialAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="71" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1a4e2f7d4f978cc10b7d0c7a0a2e098751" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsMaterialAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdPhysicsMaterialAPI</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="79" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1abb59a9dcbd139362d11201b14402bfac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API</type>
        <definition>virtual USDPHYSICS_API ~UsdPhysicsMaterialAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdPhysicsMaterialAPI</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1a12f46eb783d9e54099c0fb8a0a87c6d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetDynamicFrictionAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetDynamicFrictionAttr</name>
        <briefdescription>
<para>Dynamic friction coefficient. </para>        </briefdescription>
        <detaileddescription>
<para>Unitless.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:dynamicFriction = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1ae68a69dd92e045a1fd711a080d01bb73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateDynamicFrictionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateDynamicFrictionAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_material_a_p_i_1a12f46eb783d9e54099c0fb8a0a87c6d7" kindref="member">GetDynamicFrictionAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1aa1ddfc78341cb24a6ff985e5875ef51f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetStaticFrictionAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetStaticFrictionAttr</name>
        <briefdescription>
<para>Static friction coefficient. </para>        </briefdescription>
        <detaileddescription>
<para>Unitless.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:staticFriction = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1abdab5a97bc2c7f77611fac97e14794f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateStaticFrictionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateStaticFrictionAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_material_a_p_i_1aa1ddfc78341cb24a6ff985e5875ef51f" kindref="member">GetStaticFrictionAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1adeec09848bbde6c0cef5b7d27e1fe7f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetRestitutionAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetRestitutionAttr</name>
        <briefdescription>
<para>Restitution coefficient. </para>        </briefdescription>
        <detaileddescription>
<para>Unitless.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:restitution = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1aaac2c1eb3a178833494dc35664c6a383" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateRestitutionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateRestitutionAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_material_a_p_i_1adeec09848bbde6c0cef5b7d27e1fe7f1" kindref="member">GetRestitutionAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1ae5f97f89b2ef4ccb9a50ab5a62743c71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetDensityAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetDensityAttr</name>
        <briefdescription>
<para>If non-zero, defines the density of the material. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used for body mass computation, see PhysicsMassAPI. Note that if the density is 0.0 it is ignored. Units: mass/distance/distance/distance.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:density = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1ac2bd3353f4beb5096cc7f081631963f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateDensityAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateDensityAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_material_a_p_i_1ae5f97f89b2ef4ccb9a50ab5a62743c71" kindref="member">GetDensityAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="235" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfTokenVector &amp;</type>
        <definition>static USDPHYSICS_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1afe71a0ceb850b115c7e21f08ced4faa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsMaterialAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/><ref refid="class_usd_physics_material_a_p_i_1a02a3d09fc775b0e9ad0c1b0a362c8a61" kindref="member">UsdPhysicsMaterialAPI</ref>(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1abd88597de58281e93d9d4aa499db7a5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsMaterialAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;PhysicsMaterialAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para><para><simplesect kind="return"><para>A valid <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_physics_material_a_p_i" kindref="compound">UsdPhysicsMaterialAPI</ref> object is returned upon failure. See UsdPrim::ApplyAPI() for conditions resulting in failure.</para></simplesect>
<simplesect kind="see"><para>UsdPrim::GetAppliedSchemas() </para><simplesectsep/><para>UsdPrim::HasAPI() </para><simplesectsep/><para>UsdPrim::ApplyAPI() </para><simplesectsep/><para>UsdPrim::RemoveAPI() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="125" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdSchemaType</type>
        <definition>USDPHYSICS_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1adade0ff4639afd184e30c5708ae86f8d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>static USDPHYSICS_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_physics_material_a_p_i_1a96538019a0566b8f54f05953ac1c6615" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>USDPHYSICS_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines simulation material properties. </para>    </briefdescription>
    <detaileddescription>
<para>All collisions that have a material binding with purpose physics to this material will have their collision response defined through this material. </para>    </detaileddescription>
    <location file="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" line="60" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/materialAPI.h" bodystart="59" bodyend="248"/>
    <listofallmembers>
      <member refid="class_usd_physics_material_a_p_i_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_physics_material_a_p_i_1adade0ff4639afd184e30c5708ae86f8d" prot="private" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_physics_material_a_p_i_1a96538019a0566b8f54f05953ac1c6615" prot="private" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_physics_material_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_physics_material_a_p_i_1abd88597de58281e93d9d4aa499db7a5d" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>Apply</name></member>
      <member refid="class_usd_physics_material_a_p_i_1ac2bd3353f4beb5096cc7f081631963f6" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>CreateDensityAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1ae68a69dd92e045a1fd711a080d01bb73" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>CreateDynamicFrictionAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1aaac2c1eb3a178833494dc35664c6a383" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>CreateRestitutionAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1abdab5a97bc2c7f77611fac97e14794f2" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>CreateStaticFrictionAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1afe71a0ceb850b115c7e21f08ced4faa7" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>Get</name></member>
      <member refid="class_usd_physics_material_a_p_i_1ae5f97f89b2ef4ccb9a50ab5a62743c71" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>GetDensityAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1a12f46eb783d9e54099c0fb8a0a87c6d7" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>GetDynamicFrictionAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1adeec09848bbde6c0cef5b7d27e1fe7f1" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>GetRestitutionAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_physics_material_a_p_i_1aa1ddfc78341cb24a6ff985e5875ef51f" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>GetStaticFrictionAttr</name></member>
      <member refid="class_usd_physics_material_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>schemaType</name></member>
      <member refid="class_usd_physics_material_a_p_i_1a02a3d09fc775b0e9ad0c1b0a362c8a61" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>UsdPhysicsMaterialAPI</name></member>
      <member refid="class_usd_physics_material_a_p_i_1a4e2f7d4f978cc10b7d0c7a0a2e098751" prot="public" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>UsdPhysicsMaterialAPI</name></member>
      <member refid="class_usd_physics_material_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdPhysicsMaterialAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_physics_material_a_p_i_1abb59a9dcbd139362d11201b14402bfac" prot="public" virt="virtual"><scope>UsdPhysicsMaterialAPI</scope><name>~UsdPhysicsMaterialAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
