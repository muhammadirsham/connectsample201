#usda 1.0
(
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        double3 xformOp:rotateXYZ = (315, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "ParentTransform" {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 150, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "CubeNoExtent"
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
            float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 150)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Mesh "CubeLarger"
    {
        float3[] extent = [(-100, -100, -100), (100, 100, 100)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-100, -100, -100), (100, -100, -100), (-100, -100, 100), (100, -100, 100), (-100, 100, -100), (100, 100, -100), (100, 100, 100), (-100, 100, 100)]
        float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-250, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "CubeExtent"
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
        float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, -150)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "CubeIncorrectExtent"
    {
        float3[] extent = [(-75, -75, -75), (75, 75, 75)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
        float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-250, 150, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "deforming_mesh_no_extent"
    {
        int[] faceVertexCounts.timeSamples = {
            1: [4, 4, 4, 4, 4, 4],
        }
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 5, 7, 6, 6, 7, 2, 3, 5, 4, 1, 0, 5, 0, 2, 7, 1, 4, 6, 3]

        uniform token orientation = "leftHanded"
        point3f[] points (
            interpolation = "vertex"
        )
        point3f[] points.timeSamples = {
            1: [(0.5253124, -0.5253124, 0.5253124), (-0.48425278, -0.48425278, 0.48425278), (0.5305655, 0.5305655, 0.5305655), (-0.48643336, 0.48643336, 0.48643336), (-0.5825975, -0.5825975, -0.5825975), (0.4887837, -0.4887837, -0.4887837), (-0.5183067, 0.5183067, -0.5183067), (0.5493562, 0.5493562, -0.5493562)],
            2: [(0.50716186, -0.50716186, 0.50716186), (-0.5117382, -0.5117382, 0.5117382), (0.5406845, 0.5406845, 0.5406845), (-0.504138, 0.504138, 0.504138), (-0.5604176, -0.5604176, -0.5604176), (0.51568276, -0.51568276, -0.51568276), (-0.50604934, 0.50604934, -0.50604934), (0.5131919, 0.5131919, -0.5131919)],
            3: [(0.51582056, -0.51582056, 0.51582056), (-0.5401971, -0.5401971, 0.5401971), (0.5263891, 0.5263891, 0.5263891), (-0.49199387, 0.49199387, 0.49199387), (-0.52764773, -0.52764773, -0.52764773), (0.53259987, -0.53259987, -0.53259987), (-0.4913935, 0.4913935, -0.4913935), (0.50673807, 0.50673807, -0.50673807)],
        }
        uniform token subdivisionScheme = "none"
    }

    def Mesh "deforming_mesh_incorrect_extent_samples"
    {
        float3[] extent.timeSamples = {
            99: [(-0.56355596, -0.56355596, -0.5668505), (0.5668505, 0.5668505, 0.56355596)],
            109: [(-0.56355596, -0.56355596, -0.5668505), (0.5668505, 0.5668505, 0.56355596)]
        }
        int[] faceVertexCounts.timeSamples = {
            1: [4, 4, 4, 4, 4, 4],
        }
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 5, 7, 6, 6, 7, 2, 3, 5, 4, 1, 0, 5, 0, 2, 7, 1, 4, 6, 3]
        uniform token orientation = "leftHanded"
        point3f[] points (
            interpolation = "vertex"
        )
        point3f[] points.timeSamples = {
            1: [(0.5253124, -0.5253124, 0.5253124), (-0.48425278, -0.48425278, 0.48425278), (0.5305655, 0.5305655, 0.5305655), (-0.48643336, 0.48643336, 0.48643336), (-0.5825975, -0.5825975, -0.5825975), (0.4887837, -0.4887837, -0.4887837), (-0.5183067, 0.5183067, -0.5183067), (0.5493562, 0.5493562, -0.5493562)],
            2: [(0.50716186, -0.50716186, 0.50716186), (-0.5117382, -0.5117382, 0.5117382), (0.5406845, 0.5406845, 0.5406845), (-0.504138, 0.504138, 0.504138), (-0.5604176, -0.5604176, -0.5604176), (0.51568276, -0.51568276, -0.51568276), (-0.50604934, 0.50604934, -0.50604934), (0.5131919, 0.5131919, -0.5131919)],
        }
        uniform token subdivisionScheme = "none"
    }

    def BasisCurves "curve_0"
    {
        uniform token basis = "bezier"
        int[] curveVertexCounts.timeSamples = {
            1: [4],
            2: [4],
        }
        point3f[] points (
            interpolation = "vertex"
        )
        point3f[] points.timeSamples = {
            1: [(0, 0, 0), (0, 0.33333334, 0), (0, 0.6666667, 0), (0, 1, 0)],
            2: [(0, 0, 0), (0, 0.33333334, 0), (0, 0.6666667, 0), (0, 1, 0)],
        }
        uniform token type = "cubic"
        float[] widths (
            interpolation = "vertex"
        )
        float[] widths.timeSamples = {
            1: [1, 1, 1, 1],
            2: [2, 2, 2, 2],
        }
        uniform token wrap = "nonperiodic"
    }

    def Points "points_0"
    {
        float3[] extent.timeSamples = {
            1.0: [(-0.75, -0.75, -0.25), (0.75, 0.75, 0.25)],
            2.0: [(-0.75, -0.75, -0.25), (0.75, 0.75, 0.25)],
        }
        point3f[] points.timeSamples = {
            1.0: [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)],
            2.0: [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)],
        }
        float[] widths (
            interpolation = "vertex"
        )
        float[] widths.timeSamples = {
            1.0: [0.5, 0.5, 0.5, 0.5],
            2.0: [1, 1, 1, 1],
        }
    }

}
