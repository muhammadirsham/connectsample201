<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_usd_physics_drive_a_p_i" kind="class" prot="public">
    <compoundname>UsdPhysicsDriveAPI</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="drive_a_p_i_8h" local="no">driveAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_physics_drive_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::MultipleApplyAPI</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="76" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_physics_drive_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="188" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1af40f4ca1a10011fcdc38fe3dbdd75de2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsDriveAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim(), const TfToken &amp;name=TfToken())</argsstring>
        <name>UsdPhysicsDriveAPI</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
          <defval>TfToken()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref> on UsdPrim <computeroutput>prim</computeroutput> with name <computeroutput>name</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_physics_drive_a_p_i_1a9c00b69d61146e44d6e38323f0a052be" kindref="member">UsdPhysicsDriveAPI::Get</ref>( prim.GetStage(), prim.GetPath().AppendProperty( &quot;drive:name&quot;));</para><para>for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="87" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a41399addabfd0398881677b0fdb33c74" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsDriveAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj, const TfToken &amp;name)</argsstring>
        <name>UsdPhysicsDriveAPI</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> with name <computeroutput>name</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref>(schemaObj.GetPrim(), name), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="96" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a27e61c252ecc054dfda26699c813e789" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API</type>
        <definition>virtual USDPHYSICS_API ~UsdPhysicsDriveAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdPhysicsDriveAPI</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1aa53b87421fbc15993adfd11e9b2045eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TfToken</type>
        <definition>TfToken GetName</definition>
        <argsstring>() const </argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the name of this multiple-apply schema instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="116" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a88a68e7722c057a066eeabbebd003d5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetTypeAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetTypeAttr</name>
        <briefdescription>
<para>Drive spring is for the acceleration at the joint (rather than the force). </para>        </briefdescription>
        <detaileddescription>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>uniform token physics:type = &quot;force&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>TfToken </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token </para></entry></row>
<row>
<entry thead="no"><para>Variability </para></entry><entry thead="no"><para>SdfVariabilityUniform </para></entry></row>
<row>
<entry thead="no"><para><ref refid="usd_physics_2tokens_8h_1abecb2253be1aa39fd5a77f62b5dc1adc" kindref="member">Allowed Values</ref> </para></entry><entry thead="no"><para>force, acceleration </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1af0d78bdc9855e8453dd832bbcbed027a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateTypeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateTypeAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_drive_a_p_i_1a88a68e7722c057a066eeabbebd003d5e" kindref="member">GetTypeAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a864a8d5be12fcd4d032e0c9382ef901f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetMaxForceAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxForceAttr</name>
        <briefdescription>
<para>Maximum force that can be applied to drive. </para>        </briefdescription>
        <detaileddescription>
<para>Units: if linear drive: mass*DIST_UNITS/time/time if angular drive: mass*DIST_UNITS*DIST_UNITS/time/time inf means not limited. Must be non-negative.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:maxForce = inf</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a46c021685ac16ef20e45a7d079b62009" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateMaxForceAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateMaxForceAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_drive_a_p_i_1a864a8d5be12fcd4d032e0c9382ef901f" kindref="member">GetMaxForceAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a6c42a5c38c338b560e05c6bf1036ed2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetTargetPositionAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetTargetPositionAttr</name>
        <briefdescription>
<para>Target value for position. </para>        </briefdescription>
        <detaileddescription>
<para>Units: if linear drive: distance if angular drive: degrees.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:targetPosition = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a733c972d4364d23841e14e1c00670605" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateTargetPositionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateTargetPositionAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_drive_a_p_i_1a6c42a5c38c338b560e05c6bf1036ed2e" kindref="member">GetTargetPositionAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a6d522aaf6a92884b342d8516b033572a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetTargetVelocityAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetTargetVelocityAttr</name>
        <briefdescription>
<para>Target value for velocity. </para>        </briefdescription>
        <detaileddescription>
<para>Units: if linear drive: distance/time if angular drive: degrees/time.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:targetVelocity = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a8a5868dec1bc46f87b852bb34a28a8d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateTargetVelocityAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateTargetVelocityAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_drive_a_p_i_1a6d522aaf6a92884b342d8516b033572a" kindref="member">GetTargetVelocityAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a7a4bb793ba653c0f24e92fa33a2e5f75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetDampingAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetDampingAttr</name>
        <briefdescription>
<para>Damping of the drive. </para>        </briefdescription>
        <detaileddescription>
<para>Unitless.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:damping = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a76db4bbcd5a143ad6047f236a999f96f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateDampingAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateDampingAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_drive_a_p_i_1a7a4bb793ba653c0f24e92fa33a2e5f75" kindref="member">GetDampingAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1ab8adfd1540e0b5dfedda4c1411377579" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetStiffnessAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetStiffnessAttr</name>
        <briefdescription>
<para>Stiffness of the drive. </para>        </briefdescription>
        <detaileddescription>
<para>Unitless.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:stiffness = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a0e022005956fd55ba0540e2d7b39ab6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateStiffnessAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateStiffnessAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_drive_a_p_i_1ab8adfd1540e0b5dfedda4c1411377579" kindref="member">GetStiffnessAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="338" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1ae5d92a5564c6edecfbadab58dcc16fc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfTokenVector &amp;</type>
        <definition>static USDPHYSICS_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true, const TfToken instanceName=TfToken())</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const TfToken</type>
          <declname>instanceName</declname>
          <defval>TfToken()</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes for a given instance name. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. The names returned will have the proper namespace prefix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a9c00b69d61146e44d6e38323f0a052be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsDriveAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. <computeroutput>path</computeroutput> must be of the format &lt;path&gt;.drive:name .</para><para>This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/>TfToken<sp/>name<sp/>=<sp/>SdfPath::StripNamespace(path.GetToken());</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><ref refid="class_usd_physics_drive_a_p_i_1af40f4ca1a10011fcdc38fe3dbdd75de2" kindref="member">UsdPhysicsDriveAPI</ref>(</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>stage-&gt;GetPrimAtPath(path.GetPrimPath()),<sp/>name);</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1ae50fd33c0d26c0e2b876128325bd0a3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsDriveAPI Get</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref> with name <computeroutput>name</computeroutput> holding the prim <computeroutput>prim</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Shorthand for <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI(prim, name)</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a1626b8e8941af374f2c3821ecf45f02b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API bool</type>
        <definition>static USDPHYSICS_API bool IsSchemaPropertyBaseName</definition>
        <argsstring>(const TfToken &amp;baseName)</argsstring>
        <name>IsSchemaPropertyBaseName</name>
        <param>
          <type>const TfToken &amp;</type>
          <declname>baseName</declname>
        </param>
        <briefdescription>
<para>Checks if the given name <computeroutput>baseName</computeroutput> is the base name of a property of PhysicsDriveAPI. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a2f5113cbe415f4cc0f18439840842d54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API bool</type>
        <definition>static USDPHYSICS_API bool IsPhysicsDriveAPIPath</definition>
        <argsstring>(const SdfPath &amp;path, TfToken *name)</argsstring>
        <name>IsPhysicsDriveAPIPath</name>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>TfToken *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Checks if the given path <computeroutput>path</computeroutput> is of an API schema of type PhysicsDriveAPI. </para>        </briefdescription>
        <detaileddescription>
<para>If so, it stores the instance name of the schema in <computeroutput>name</computeroutput> and returns true. Otherwise, it returns false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1aebea0168d5959c7b451b82d8df3eb361" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsDriveAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Apply</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>multiple-apply</bold> API schema to the given <computeroutput>prim</computeroutput> along with the given instance name, <computeroutput>name</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;PhysicsDriveAPI:&lt;i&gt;name&lt;/i&gt;&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim. For example, if <computeroutput>name</computeroutput> is &apos;instance1&apos;, the token &apos;PhysicsDriveAPI:instance1&apos; is added to &apos;apiSchemas&apos;.</para><para><simplesect kind="return"><para>A valid <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_physics_drive_a_p_i" kindref="compound">UsdPhysicsDriveAPI</ref> object is returned upon failure. See UsdPrim::ApplyAPI() for conditions resulting in failure.</para></simplesect>
<simplesect kind="see"><para>UsdPrim::GetAppliedSchemas() </para><simplesectsep/><para>UsdPrim::HasAPI() </para><simplesectsep/><para>UsdPrim::ApplyAPI() </para><simplesectsep/><para>UsdPrim::RemoveAPI() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="177" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdSchemaType</type>
        <definition>USDPHYSICS_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="184" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1adade0ff4639afd184e30c5708ae86f8d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>static USDPHYSICS_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="192" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_physics_drive_a_p_i_1a96538019a0566b8f54f05953ac1c6615" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>USDPHYSICS_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="196" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The PhysicsDriveAPI when applied to any joint primitive will drive the joint towards a given target. </para>    </briefdescription>
    <detaileddescription>
<para>The PhysicsDriveAPI is a multipleApply schema: drive can be set per axis &quot;transX&quot;, &quot;transY&quot;, &quot;transZ&quot;, &quot;rotX&quot;, &quot;rotY&quot;, &quot;rotZ&quot; or its &quot;linear&quot; for prismatic joint or &quot;angular&quot; for revolute joints. Setting these as a multipleApply schema TfToken name will define the degree of freedom the DriveAPI is applied to. Each drive is an implicit force-limited damped spring: Force or acceleration = stiffness * (targetPosition - position)<itemizedlist>
<listitem><para>damping * (targetVelocity - velocity)</para></listitem></itemizedlist>
</para><para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_physics_2tokens_8h_1abecb2253be1aa39fd5a77f62b5dc1adc" kindref="member">UsdPhysicsTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdPhysicsTokens-&gt;rightHanded as the value. </para>    </detaileddescription>
    <location file="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" line="71" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/driveAPI.h" bodystart="70" bodyend="351"/>
    <listofallmembers>
      <member refid="class_usd_physics_drive_a_p_i_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1adade0ff4639afd184e30c5708ae86f8d" prot="private" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a96538019a0566b8f54f05953ac1c6615" prot="private" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1aebea0168d5959c7b451b82d8df3eb361" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>Apply</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a76db4bbcd5a143ad6047f236a999f96f" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>CreateDampingAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a46c021685ac16ef20e45a7d079b62009" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>CreateMaxForceAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a0e022005956fd55ba0540e2d7b39ab6f" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>CreateStiffnessAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a733c972d4364d23841e14e1c00670605" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>CreateTargetPositionAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a8a5868dec1bc46f87b852bb34a28a8d3" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>CreateTargetVelocityAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1af0d78bdc9855e8453dd832bbcbed027a" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>CreateTypeAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a9c00b69d61146e44d6e38323f0a052be" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>Get</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1ae50fd33c0d26c0e2b876128325bd0a3f" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>Get</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a7a4bb793ba653c0f24e92fa33a2e5f75" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetDampingAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a864a8d5be12fcd4d032e0c9382ef901f" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetMaxForceAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1aa53b87421fbc15993adfd11e9b2045eb" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetName</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1ae5d92a5564c6edecfbadab58dcc16fc4" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1ab8adfd1540e0b5dfedda4c1411377579" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetStiffnessAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a6c42a5c38c338b560e05c6bf1036ed2e" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetTargetPositionAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a6d522aaf6a92884b342d8516b033572a" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetTargetVelocityAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a88a68e7722c057a066eeabbebd003d5e" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>GetTypeAttr</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a2f5113cbe415f4cc0f18439840842d54" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>IsPhysicsDriveAPIPath</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a1626b8e8941af374f2c3821ecf45f02b" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>IsSchemaPropertyBaseName</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>schemaType</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1af40f4ca1a10011fcdc38fe3dbdd75de2" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>UsdPhysicsDriveAPI</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a41399addabfd0398881677b0fdb33c74" prot="public" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>UsdPhysicsDriveAPI</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdPhysicsDriveAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_physics_drive_a_p_i_1a27e61c252ecc054dfda26699c813e789" prot="public" virt="virtual"><scope>UsdPhysicsDriveAPI</scope><name>~UsdPhysicsDriveAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
