<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_physx_schema_physx_vehicle_engine_a_p_i" kind="class" prot="public">
    <compoundname>PhysxSchemaPhysxVehicleEngineAPI</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="physx_vehicle_engine_a_p_i_8h" local="no">physxVehicleEngineAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_physx_schema_physx_vehicle_engine_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::SingleApplyAPI</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="66" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_physx_schema_physx_vehicle_engine_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="137" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ae0720459caf6f74dee045948d348cd7d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PhysxSchemaPhysxVehicleEngineAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>PhysxSchemaPhysxVehicleEngineAPI</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref> on UsdPrim <computeroutput>prim</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a64bd8c6905a5910f9c895b58deba1e77" kindref="member">PhysxSchemaPhysxVehicleEngineAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="72" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a9ac4505f42826b53aaadbf8f0b6793fb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PhysxSchemaPhysxVehicleEngineAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>PhysxSchemaPhysxVehicleEngineAPI</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="80" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a83e3fddda3cd1c723dbe858b6d05d47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>PHYSXSCHEMA_API</type>
        <definition>virtual PHYSXSCHEMA_API ~PhysxSchemaPhysxVehicleEngineAPI</definition>
        <argsstring>()</argsstring>
        <name>~PhysxSchemaPhysxVehicleEngineAPI</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1aeb842ab43c344d08169757925351e7d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetMoiAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetMoiAttr</name>
        <briefdescription>
<para>The moment of inertia of the engine around the axis of rotation. </para>        </briefdescription>
        <detaileddescription>
<para>The value has to be positive.</para><para>Note: if not defined, the value 1.0 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicleEngine:moi</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ae1b6541293a679816ae351186f3075c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateMoiAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateMoiAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aeb842ab43c344d08169757925351e7d9" kindref="member">GetMoiAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ae6afe0fdb385296ad18f68a8753335c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetPeakTorqueAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetPeakTorqueAttr</name>
        <briefdescription>
<para>Maximum torque available to apply to the engine when the accelerator pedal is at maximum (default unit is kilograms meters-squared per second-squared [kg m^2 s^-2]). </para>        </briefdescription>
        <detaileddescription>
<para>The value has to be positive.</para><para>Note: the torque available is the value of the accelerator pedal (in range [0, 1]) multiplied by the normalized torque as computed from torqueCurve (see corresponding attribute) multiplied by peakTorque.</para><para>Note: if not defined, the value 500.0 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicleEngine:peakTorque</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a503e32b058e01543c756fd353a61db27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreatePeakTorqueAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreatePeakTorqueAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae6afe0fdb385296ad18f68a8753335c4" kindref="member">GetPeakTorqueAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a08d241615a8a8c811f3ab87b85296e2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetMaxRotationSpeedAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxRotationSpeedAttr</name>
        <briefdescription>
<para>Maximum rotation speed of the engine (unit is radians per second [s^-1]). </para>        </briefdescription>
        <detaileddescription>
<para>The value has to be positive.</para><para>Note: if not defined, the value 600.0 will be used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicleEngine:maxRotationSpeed</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1aa253b8817f5cde7eef72f43c71154345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateMaxRotationSpeedAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateMaxRotationSpeedAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a08d241615a8a8c811f3ab87b85296e2c" kindref="member">GetMaxRotationSpeedAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1aad0d8ccb30f3e8b0ba8ff75b2f1ef25f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetTorqueCurveAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetTorqueCurveAttr</name>
        <briefdescription>
<para>Graph of normalized torque (torque / peakTorque) against normalized engine speed (engineRotationSpeed / maxRotationSpeed). </para>        </briefdescription>
        <detaileddescription>
<para>Note: the normalized engine speed is the x-axis of the graph, while the normalized torque is the y-axis of the graph. No more than 8 data points are supported.</para><para>Note: if not defined, the following values will be used: [(0.0, 0.8), (0.33, 1.0), (1.0, 0.8)].</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float2[] physxVehicleEngine:torqueCurve</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>VtArray&lt;GfVec2f&gt; </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float2Array </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a4ba11503c89eb070adc30750904e3945" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateTorqueCurveAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateTorqueCurveAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aad0d8ccb30f3e8b0ba8ff75b2f1ef25f" kindref="member">GetTorqueCurveAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ae7c4db2dd9d1c5d15bb93ac62623dcf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetDampingRateFullThrottleAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetDampingRateFullThrottleAttr</name>
        <briefdescription>
<para>Damping rate of engine when full throttle is applied (default unit is kilograms meters-squared per second [kg m^2 s^-1]). </para>        </briefdescription>
        <detaileddescription>
<para>The value has to be positive.</para><para>Note: if the clutch is engaged (any gear except neutral) then the damping rate applied at run-time is an interpolation between dampingRateZeroThrottleClutchEngaged (see corresponding attribute) and dampingRateFullThrottle: dampingRateZeroThrottleClutchEngaged + ((dampingRateFullThrottle-dampingRateZeroThrottleClutchEngaged) * acceleratorPedal).</para><para>Note: if the clutch is disengaged (in neutral gear) the damping rate applied at run-time is an interpolation between dampingRateZeroThrottleClutchDisengaged (see corresponding attribute) and dampingRateFullThrottle: dampingRateZeroThrottleClutchDisengaged + ((dampingRateFullThrottle-dampingRateZeroThrottleClutchDisengaged) * acceleratorPedal).</para><para>Note: if not defined, the value 0.15 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicleEngine:dampingRateFullThrottle</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a5b7b4e14144321a2930de8cbb1488ed1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateDampingRateFullThrottleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateDampingRateFullThrottleAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae7c4db2dd9d1c5d15bb93ac62623dcf8" kindref="member">GetDampingRateFullThrottleAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1aed39afbf58146022e95ccda59524689d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetDampingRateZeroThrottleClutchEngagedAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetDampingRateZeroThrottleClutchEngagedAttr</name>
        <briefdescription>
<para>Damping rate of engine when not throttle is applied and the clutch is engaged (default unit is kilograms meters-squared per second [kg m^2 s^-1]). </para>        </briefdescription>
        <detaileddescription>
<para>See attribute &quot;dampingRateFullThrottle&quot; for information about the effect of the value. The value has to be positive.</para><para>Note: if not defined, the value 2.0 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicleEngine:dampingRateZeroThrottleClutchEngaged</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a47a943a2c2f64a0888452af5a4ab4205" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateDampingRateZeroThrottleClutchEngagedAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateDampingRateZeroThrottleClutchEngagedAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aed39afbf58146022e95ccda59524689d" kindref="member">GetDampingRateZeroThrottleClutchEngagedAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a98867417d74941b2d4c3b2b9ece47fb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetDampingRateZeroThrottleClutchDisengagedAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetDampingRateZeroThrottleClutchDisengagedAttr</name>
        <briefdescription>
<para>Damping rate of engine when not throttle is applied and the clutch is disengaged (default unit is kilograms meters-squared per second [kg m^2 s^-1]). </para>        </briefdescription>
        <detaileddescription>
<para>See attribute &quot;dampingRateFullThrottle&quot; for information about the effect of the value. The value has to be positive.</para><para>Note: if not defined, the value 0.35 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicleEngine:dampingRateZeroThrottleClutchDisengaged</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ad249181da77cd40936dda27780c390cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateDampingRateZeroThrottleClutchDisengagedAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateDampingRateZeroThrottleClutchDisengagedAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a98867417d74941b2d4c3b2b9ece47fb4" kindref="member">GetDampingRateZeroThrottleClutchDisengagedAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="343" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a4acc8a487a53fd3129d77bb286d75140" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfTokenVector &amp;</type>
        <definition>static PHYSXSCHEMA_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a64bd8c6905a5910f9c895b58deba1e77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxVehicleEngineAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/><ref refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae0720459caf6f74dee045948d348cd7d" kindref="member">PhysxSchemaPhysxVehicleEngineAPI</ref>(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ae0ddc4c75c2067e119ee7ea80822d4a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxVehicleEngineAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;PhysxVehicleEngineAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para><para><simplesect kind="return"><para>A valid <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_physx_schema_physx_vehicle_engine_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleEngineAPI</ref> object is returned upon failure. See UsdPrim::ApplyAPI() for conditions resulting in failure.</para></simplesect>
<simplesect kind="see"><para>UsdPrim::GetAppliedSchemas() </para><simplesectsep/><para>UsdPrim::HasAPI() </para><simplesectsep/><para>UsdPrim::ApplyAPI() </para><simplesectsep/><para>UsdPrim::RemoveAPI() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="126" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a1cf3042cb6534cfb5768a029099cd2f1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdSchemaType</type>
        <definition>PHYSXSCHEMA_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="133" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1a3014e93c3ab2a0b4770d0ce561a03b9d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfType &amp;</type>
        <definition>static PHYSXSCHEMA_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="141" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_engine_a_p_i_1ac9917b582d82c9a980c227a7de3d4352" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfType &amp;</type>
        <definition>PHYSXSCHEMA_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Properties of a PhysX vehicle engine. </para>    </briefdescription>
    <detaileddescription>
<para>If the engine setup does not need to be shared among vehicle instances, it can be applied to the prim which has PhysxVehicleDriveStandardAPI applied. If the intent is to share the engine setup, PhysxVehicleEngineAPI can be applied to a separate prim which can be linked to (see PhysxVehicleDriveStandardAPI). </para>    </detaileddescription>
    <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" line="61" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleEngineAPI.h" bodystart="60" bodyend="356"/>
    <listofallmembers>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a1cf3042cb6534cfb5768a029099cd2f1" prot="protected" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a3014e93c3ab2a0b4770d0ce561a03b9d" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ac9917b582d82c9a980c227a7de3d4352" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>_GetTfType</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae0ddc4c75c2067e119ee7ea80822d4a1" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>Apply</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a5b7b4e14144321a2930de8cbb1488ed1" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreateDampingRateFullThrottleAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ad249181da77cd40936dda27780c390cf" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreateDampingRateZeroThrottleClutchDisengagedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a47a943a2c2f64a0888452af5a4ab4205" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreateDampingRateZeroThrottleClutchEngagedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aa253b8817f5cde7eef72f43c71154345" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreateMaxRotationSpeedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae1b6541293a679816ae351186f3075c7" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreateMoiAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a503e32b058e01543c756fd353a61db27" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreatePeakTorqueAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a4ba11503c89eb070adc30750904e3945" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>CreateTorqueCurveAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a64bd8c6905a5910f9c895b58deba1e77" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>Get</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae7c4db2dd9d1c5d15bb93ac62623dcf8" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetDampingRateFullThrottleAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a98867417d74941b2d4c3b2b9ece47fb4" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetDampingRateZeroThrottleClutchDisengagedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aed39afbf58146022e95ccda59524689d" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetDampingRateZeroThrottleClutchEngagedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a08d241615a8a8c811f3ab87b85296e2c" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetMaxRotationSpeedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aeb842ab43c344d08169757925351e7d9" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetMoiAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae6afe0fdb385296ad18f68a8753335c4" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetPeakTorqueAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a4acc8a487a53fd3129d77bb286d75140" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aad0d8ccb30f3e8b0ba8ff75b2f1ef25f" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>GetTorqueCurveAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1ae0720459caf6f74dee045948d348cd7d" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>PhysxSchemaPhysxVehicleEngineAPI</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a9ac4505f42826b53aaadbf8f0b6793fb" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>PhysxSchemaPhysxVehicleEngineAPI</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>schemaType</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_physx_schema_physx_vehicle_engine_a_p_i_1a83e3fddda3cd1c723dbe858b6d05d47c" prot="public" virt="virtual"><scope>PhysxSchemaPhysxVehicleEngineAPI</scope><name>~PhysxSchemaPhysxVehicleEngineAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
