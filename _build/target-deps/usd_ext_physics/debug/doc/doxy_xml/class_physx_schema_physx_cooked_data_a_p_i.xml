<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_physx_schema_physx_cooked_data_a_p_i" kind="class" prot="public">
    <compoundname>PhysxSchemaPhysxCookedDataAPI</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="physx_cooked_data_a_p_i_8h" local="no">physxCookedDataAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_physx_schema_physx_cooked_data_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::MultipleApplyAPI</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="63" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_physx_schema_physx_cooked_data_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="175" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1afe93ea485b2b0ac31967b9140bb22891" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PhysxSchemaPhysxCookedDataAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim(), const TfToken &amp;name=TfToken())</argsstring>
        <name>PhysxSchemaPhysxCookedDataAPI</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
          <defval>TfToken()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref> on UsdPrim <computeroutput>prim</computeroutput> with name <computeroutput>name</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_physx_schema_physx_cooked_data_a_p_i_1a7451a684527b5112c2c29d2f6a5d3079" kindref="member">PhysxSchemaPhysxCookedDataAPI::Get</ref>( prim.GetStage(), prim.GetPath().AppendProperty( &quot;physxCookedData:name&quot;));</para><para>for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="74" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a1d7bb06ff94c6b5cedbf53d04b7de6d9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PhysxSchemaPhysxCookedDataAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj, const TfToken &amp;name)</argsstring>
        <name>PhysxSchemaPhysxCookedDataAPI</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> with name <computeroutput>name</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref>(schemaObj.GetPrim(), name), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="83" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a17ae45dcacccfe30a624d923eb12c743" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>PHYSXSCHEMA_API</type>
        <definition>virtual PHYSXSCHEMA_API ~PhysxSchemaPhysxCookedDataAPI</definition>
        <argsstring>()</argsstring>
        <name>~PhysxSchemaPhysxCookedDataAPI</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1aa53b87421fbc15993adfd11e9b2045eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TfToken</type>
        <definition>TfToken GetName</definition>
        <argsstring>() const </argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the name of this multiple-apply schema instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="103" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a6a8ce07ac552f7d1fdc18a45e170e873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetBufferAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetBufferAttr</name>
        <briefdescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>uchar[] buffer</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>VtArray&lt;unsigned char&gt; </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;UCharArray </para></entry></row>
</table>
</para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a7ad08ac009a755c85ae70b11fbe4fc9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateBufferAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateBufferAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_cooked_data_a_p_i_1a6a8ce07ac552f7d1fdc18a45e170e873" kindref="member">GetBufferAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="205" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1ac74ade0d84fa71669cba8f1aabe0648a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfTokenVector &amp;</type>
        <definition>static PHYSXSCHEMA_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true, const TfToken instanceName=TfToken())</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const TfToken</type>
          <declname>instanceName</declname>
          <defval>TfToken()</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes for a given instance name. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. The names returned will have the proper namespace prefix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a7451a684527b5112c2c29d2f6a5d3079" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxCookedDataAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. <computeroutput>path</computeroutput> must be of the format &lt;path&gt;.physxCookedData:name .</para><para>This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/>TfToken<sp/>name<sp/>=<sp/>SdfPath::StripNamespace(path.GetToken());</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><ref refid="class_physx_schema_physx_cooked_data_a_p_i_1afe93ea485b2b0ac31967b9140bb22891" kindref="member">PhysxSchemaPhysxCookedDataAPI</ref>(</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>stage-&gt;GetPrimAtPath(path.GetPrimPath()),<sp/>name);</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a57c256a684552b48840ce5afc5a52680" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxCookedDataAPI Get</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref> with name <computeroutput>name</computeroutput> holding the prim <computeroutput>prim</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Shorthand for <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI(prim, name)</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1aa8ff5e877e3474ed29495ff9b7af84be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API bool</type>
        <definition>static PHYSXSCHEMA_API bool IsSchemaPropertyBaseName</definition>
        <argsstring>(const TfToken &amp;baseName)</argsstring>
        <name>IsSchemaPropertyBaseName</name>
        <param>
          <type>const TfToken &amp;</type>
          <declname>baseName</declname>
        </param>
        <briefdescription>
<para>Checks if the given name <computeroutput>baseName</computeroutput> is the base name of a property of PhysxCookedDataAPI. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1aab52f54500f88da607a26ad3fc81b6f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API bool</type>
        <definition>static PHYSXSCHEMA_API bool IsPhysxCookedDataAPIPath</definition>
        <argsstring>(const SdfPath &amp;path, TfToken *name)</argsstring>
        <name>IsPhysxCookedDataAPIPath</name>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>TfToken *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Checks if the given path <computeroutput>path</computeroutput> is of an API schema of type PhysxCookedDataAPI. </para>        </briefdescription>
        <detaileddescription>
<para>If so, it stores the instance name of the schema in <computeroutput>name</computeroutput> and returns true. Otherwise, it returns false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a9c89b7be62d37fc00d55c6495ab91f2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxCookedDataAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Apply</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const TfToken &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>multiple-apply</bold> API schema to the given <computeroutput>prim</computeroutput> along with the given instance name, <computeroutput>name</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;PhysxCookedDataAPI:&lt;i&gt;name&lt;/i&gt;&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim. For example, if <computeroutput>name</computeroutput> is &apos;instance1&apos;, the token &apos;PhysxCookedDataAPI:instance1&apos; is added to &apos;apiSchemas&apos;.</para><para><simplesect kind="return"><para>A valid <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_physx_schema_physx_cooked_data_a_p_i" kindref="compound">PhysxSchemaPhysxCookedDataAPI</ref> object is returned upon failure. See UsdPrim::ApplyAPI() for conditions resulting in failure.</para></simplesect>
<simplesect kind="see"><para>UsdPrim::GetAppliedSchemas() </para><simplesectsep/><para>UsdPrim::HasAPI() </para><simplesectsep/><para>UsdPrim::ApplyAPI() </para><simplesectsep/><para>UsdPrim::RemoveAPI() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="164" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a1cf3042cb6534cfb5768a029099cd2f1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdSchemaType</type>
        <definition>PHYSXSCHEMA_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="171" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1a3014e93c3ab2a0b4770d0ce561a03b9d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfType &amp;</type>
        <definition>static PHYSXSCHEMA_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="179" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_physx_schema_physx_cooked_data_a_p_i_1ac9917b582d82c9a980c227a7de3d4352" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfType &amp;</type>
        <definition>PHYSXSCHEMA_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="183" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PhysX cooked data storage. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" line="58" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxCookedDataAPI.h" bodystart="57" bodyend="218"/>
    <listofallmembers>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a1cf3042cb6534cfb5768a029099cd2f1" prot="protected" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a3014e93c3ab2a0b4770d0ce561a03b9d" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1ac9917b582d82c9a980c227a7de3d4352" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>_GetTfType</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a9c89b7be62d37fc00d55c6495ab91f2d" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>Apply</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a7ad08ac009a755c85ae70b11fbe4fc9d" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>CreateBufferAttr</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a7451a684527b5112c2c29d2f6a5d3079" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>Get</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a57c256a684552b48840ce5afc5a52680" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>Get</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a6a8ce07ac552f7d1fdc18a45e170e873" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>GetBufferAttr</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1aa53b87421fbc15993adfd11e9b2045eb" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>GetName</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1ac74ade0d84fa71669cba8f1aabe0648a" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1aab52f54500f88da607a26ad3fc81b6f8" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>IsPhysxCookedDataAPIPath</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1aa8ff5e877e3474ed29495ff9b7af84be" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>IsSchemaPropertyBaseName</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1afe93ea485b2b0ac31967b9140bb22891" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>PhysxSchemaPhysxCookedDataAPI</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a1d7bb06ff94c6b5cedbf53d04b7de6d9" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>PhysxSchemaPhysxCookedDataAPI</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>schemaType</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_physx_schema_physx_cooked_data_a_p_i_1a17ae45dcacccfe30a624d923eb12c743" prot="public" virt="virtual"><scope>PhysxSchemaPhysxCookedDataAPI</scope><name>~PhysxSchemaPhysxCookedDataAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
