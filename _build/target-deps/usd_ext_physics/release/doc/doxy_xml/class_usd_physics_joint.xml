<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_usd_physics_joint" kind="class" prot="public">
    <compoundname>UsdPhysicsJoint</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdGeomImageable</basecompoundref>
    <derivedcompoundref refid="class_physx_schema_physx_physics_gear_joint" prot="public" virt="non-virtual">PhysxSchemaPhysxPhysicsGearJoint</derivedcompoundref>
    <derivedcompoundref refid="class_physx_schema_physx_physics_rack_and_pinion_joint" prot="public" virt="non-virtual">PhysxSchemaPhysxPhysicsRackAndPinionJoint</derivedcompoundref>
    <derivedcompoundref refid="class_usd_physics_distance_joint" prot="public" virt="non-virtual">UsdPhysicsDistanceJoint</derivedcompoundref>
    <derivedcompoundref refid="class_usd_physics_fixed_joint" prot="public" virt="non-virtual">UsdPhysicsFixedJoint</derivedcompoundref>
    <derivedcompoundref refid="class_usd_physics_prismatic_joint" prot="public" virt="non-virtual">UsdPhysicsPrismaticJoint</derivedcompoundref>
    <derivedcompoundref refid="class_usd_physics_revolute_joint" prot="public" virt="non-virtual">UsdPhysicsRevoluteJoint</derivedcompoundref>
    <derivedcompoundref refid="class_usd_physics_spherical_joint" prot="public" virt="non-virtual">UsdPhysicsSphericalJoint</derivedcompoundref>
    <includes refid="joint_8h" local="no">joint.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_physics_joint_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::ConcreteTyped</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="68" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/joint.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_physics_joint_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="146" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/joint.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_physics_joint_1ae319694b2fe1a6bdc26c2cad77ce44ef" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsJoint</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdPhysicsJoint</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_joint" kindref="compound">UsdPhysicsJoint</ref> on UsdPrim <computeroutput>prim</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_physics_joint_1a46fd6a00ef3658259fa479f8a7a9185c" kindref="member">UsdPhysicsJoint::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="74" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/joint.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a3cabb7cdfb60fcaadbaba28a25c7542e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsJoint</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdPhysicsJoint</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_joint" kindref="compound">UsdPhysicsJoint</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_physics_joint" kindref="compound">UsdPhysicsJoint</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="82" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/joint.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ada6aa415b33d1b52959abd4551a49a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API</type>
        <definition>virtual USDPHYSICS_API ~UsdPhysicsJoint</definition>
        <argsstring>()</argsstring>
        <name>~UsdPhysicsJoint</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ad1272cea9e07d866be6868fff1ee7651" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetLocalPos0Attr</definition>
        <argsstring>() const </argsstring>
        <name>GetLocalPos0Attr</name>
        <briefdescription>
<para>Relative position of the joint frame to body0&apos;s frame. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>point3f physics:localPos0 = (0, 0, 0)</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>GfVec3f </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Point3f </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ad7881851b80050765e16afebf0820f38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateLocalPos0Attr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateLocalPos0Attr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1ad1272cea9e07d866be6868fff1ee7651" kindref="member">GetLocalPos0Attr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a186dd00c84e66194a2d55ef904445ffb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetLocalRot0Attr</definition>
        <argsstring>() const </argsstring>
        <name>GetLocalRot0Attr</name>
        <briefdescription>
<para>Relative orientation of the joint frame to body0&apos;s frame. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>quatf physics:localRot0 = (1, 0, 0, 0)</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>GfQuatf </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Quatf </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ac632af557012196ff01b1374d83bc0ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateLocalRot0Attr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateLocalRot0Attr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1a186dd00c84e66194a2d55ef904445ffb" kindref="member">GetLocalRot0Attr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ab91e286a17446ebaea8f19778d4910ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetLocalPos1Attr</definition>
        <argsstring>() const </argsstring>
        <name>GetLocalPos1Attr</name>
        <briefdescription>
<para>Relative position of the joint frame to body1&apos;s frame. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>point3f physics:localPos1 = (0, 0, 0)</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>GfVec3f </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Point3f </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a730caab248cd85607efb8c426b3138d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateLocalPos1Attr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateLocalPos1Attr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1ab91e286a17446ebaea8f19778d4910ff" kindref="member">GetLocalPos1Attr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a1a4ab96edf8d6922ba2f75c5d369c8be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetLocalRot1Attr</definition>
        <argsstring>() const </argsstring>
        <name>GetLocalRot1Attr</name>
        <briefdescription>
<para>Relative orientation of the joint frame to body1&apos;s frame. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>quatf physics:localRot1 = (1, 0, 0, 0)</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>GfQuatf </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Quatf </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a60ffa625d6ec33dfe3549b2a742bdbbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateLocalRot1Attr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateLocalRot1Attr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1a1a4ab96edf8d6922ba2f75c5d369c8be" kindref="member">GetLocalRot1Attr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ae66db905deb63d4c9de399e13675506e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetJointEnabledAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetJointEnabledAttr</name>
        <briefdescription>
<para>Determines if the joint is enabled. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>bool physics:jointEnabled = 1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>bool </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a0fa8350c6c2cec14f03dd8f2813d0747" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateJointEnabledAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateJointEnabledAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1ae66db905deb63d4c9de399e13675506e" kindref="member">GetJointEnabledAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a0f14d3a308d85b8dcb2104e2f77942f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetCollisionEnabledAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetCollisionEnabledAttr</name>
        <briefdescription>
<para>Determines if the jointed subtrees should collide or not. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>bool physics:collisionEnabled = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>bool </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a10041d624985a04487ad87d2bd009316" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateCollisionEnabledAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateCollisionEnabledAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1a0f14d3a308d85b8dcb2104e2f77942f0" kindref="member">GetCollisionEnabledAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a703731dd841f8882e4fec9ba6b4f0bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetExcludeFromArticulationAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetExcludeFromArticulationAttr</name>
        <briefdescription>
<para>Determines if the joint can be included in an Articulation. </para>        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>uniform bool physics:excludeFromArticulation = 0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>bool </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool </para></entry></row>
<row>
<entry thead="no"><para>Variability </para></entry><entry thead="no"><para>SdfVariabilityUniform </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a47c5965866c9b0692792f187ed93eb9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateExcludeFromArticulationAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateExcludeFromArticulationAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1a703731dd841f8882e4fec9ba6b4f0bfa" kindref="member">GetExcludeFromArticulationAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a07783b09c7b783d2df591b797defaae1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetBreakForceAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetBreakForceAttr</name>
        <briefdescription>
<para>Joint break force. </para>        </briefdescription>
        <detaileddescription>
<para>If set, joint is to break when this force limit is reached. (Used for linear dofs.) Units: mass * distance / time / time</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:breakForce = inf</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1aacd5c7041ece30946de02a28482c0b4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateBreakForceAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateBreakForceAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1a07783b09c7b783d2df591b797defaae1" kindref="member">GetBreakForceAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1abbf7f7d4e01ebacfbf641b899acd91d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetBreakTorqueAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetBreakTorqueAttr</name>
        <briefdescription>
<para>Joint break torque. </para>        </briefdescription>
        <detaileddescription>
<para>If set, joint is to break when this torque limit is reached. (Used for angular dofs.) Units: mass * distance * distance / time / time</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:breakTorque = inf</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ab60f041a25b552c0b95ee7644c6e10bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateBreakTorqueAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateBreakTorqueAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1abbf7f7d4e01ebacfbf641b899acd91d3" kindref="member">GetBreakTorqueAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1ac2593077bb1803f61a6e58dc9ea07420" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdRelationship</type>
        <definition>USDPHYSICS_API UsdRelationship GetBody0Rel</definition>
        <argsstring>() const </argsstring>
        <name>GetBody0Rel</name>
        <briefdescription>
<para>Relationship to any UsdGeomXformable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a3c4354c477a696fc524bd6b75ed7ad18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdRelationship</type>
        <definition>USDPHYSICS_API UsdRelationship CreateBody0Rel</definition>
        <argsstring>() const </argsstring>
        <name>CreateBody0Rel</name>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1ac2593077bb1803f61a6e58dc9ea07420" kindref="member">GetBody0Rel()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a9f19349e454fcaed39e5c41805a1e584" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdRelationship</type>
        <definition>USDPHYSICS_API UsdRelationship GetBody1Rel</definition>
        <argsstring>() const </argsstring>
        <name>GetBody1Rel</name>
        <briefdescription>
<para>Relationship to any UsdGeomXformable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a6fa443329827f47757cab08811c90a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdRelationship</type>
        <definition>USDPHYSICS_API UsdRelationship CreateBody1Rel</definition>
        <argsstring>() const </argsstring>
        <name>CreateBody1Rel</name>
        <briefdescription>
<para>See <ref refid="class_usd_physics_joint_1a9f19349e454fcaed39e5c41805a1e584" kindref="member">GetBody1Rel()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="385" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_physics_joint_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfTokenVector &amp;</type>
        <definition>static USDPHYSICS_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a46fd6a00ef3658259fa479f8a7a9185c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_joint" kindref="compound">UsdPhysicsJoint</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsJoint Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_joint" kindref="compound">UsdPhysicsJoint</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/><ref refid="class_usd_physics_joint_1ae319694b2fe1a6bdc26c2cad77ce44ef" kindref="member">UsdPhysicsJoint</ref>(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1a67445ed3bbe7f181dc15a9e2b5360bf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_joint" kindref="compound">UsdPhysicsJoint</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsJoint Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis>UsdPrim</emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to UsdPrim::IsDefined()) on this stage. </para>        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis>SdfPrimSpec</emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis>SdfPrimSpec</emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para><para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para><para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current UsdEditTarget&apos;s namespace) issue an error and return an invalid <emphasis>UsdPrim</emphasis>.</para><para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_physics_joint_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdSchemaType</type>
        <definition>USDPHYSICS_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="142" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_physics_joint_1adade0ff4639afd184e30c5708ae86f8d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>static USDPHYSICS_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_joint_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="150" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_physics_joint_1a96538019a0566b8f54f05953ac1c6615" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>USDPHYSICS_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A joint constrains the movement of rigid bodies. </para>    </briefdescription>
    <detaileddescription>
<para>Joint can be created between two rigid bodies or between one rigid body and world. By default joint primitive defines a D6 joint where all degrees of freedom are free. Three linear and three angular degrees of freedom. Note that default behavior is to disable collision between jointed bodies. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="312">
        <label>PhysxSchemaPhysxPhysicsRackAndPinionJoint</label>
        <link refid="class_physx_schema_physx_physics_rack_and_pinion_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="316">
        <label>UsdPhysicsRevoluteJoint</label>
        <link refid="class_usd_physics_revolute_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="314">
        <label>UsdPhysicsFixedJoint</label>
        <link refid="class_usd_physics_fixed_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="313">
        <label>UsdPhysicsDistanceJoint</label>
        <link refid="class_usd_physics_distance_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="311">
        <label>PhysxSchemaPhysxPhysicsGearJoint</label>
        <link refid="class_physx_schema_physx_physics_gear_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="315">
        <label>UsdPhysicsPrismaticJoint</label>
        <link refid="class_usd_physics_prismatic_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="310">
        <label>UsdPhysicsJoint</label>
        <link refid="class_usd_physics_joint"/>
      </node>
      <node id="317">
        <label>UsdPhysicsSphericalJoint</label>
        <link refid="class_usd_physics_spherical_joint"/>
        <childnode refid="310" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="W:/919a5455eee1e83c/src/usdPhysics/joint.h" line="63" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/joint.h" bodystart="62" bodyend="398"/>
    <listofallmembers>
      <member refid="class_usd_physics_joint_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_physics_joint_1adade0ff4639afd184e30c5708ae86f8d" prot="private" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_physics_joint_1a96538019a0566b8f54f05953ac1c6615" prot="private" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>_GetTfType</name></member>
      <member refid="class_usd_physics_joint_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_physics_joint_1a3c4354c477a696fc524bd6b75ed7ad18" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateBody0Rel</name></member>
      <member refid="class_usd_physics_joint_1a6fa443329827f47757cab08811c90a77" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateBody1Rel</name></member>
      <member refid="class_usd_physics_joint_1aacd5c7041ece30946de02a28482c0b4b" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateBreakForceAttr</name></member>
      <member refid="class_usd_physics_joint_1ab60f041a25b552c0b95ee7644c6e10bb" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateBreakTorqueAttr</name></member>
      <member refid="class_usd_physics_joint_1a10041d624985a04487ad87d2bd009316" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateCollisionEnabledAttr</name></member>
      <member refid="class_usd_physics_joint_1a47c5965866c9b0692792f187ed93eb9c" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateExcludeFromArticulationAttr</name></member>
      <member refid="class_usd_physics_joint_1a0fa8350c6c2cec14f03dd8f2813d0747" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateJointEnabledAttr</name></member>
      <member refid="class_usd_physics_joint_1ad7881851b80050765e16afebf0820f38" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateLocalPos0Attr</name></member>
      <member refid="class_usd_physics_joint_1a730caab248cd85607efb8c426b3138d2" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateLocalPos1Attr</name></member>
      <member refid="class_usd_physics_joint_1ac632af557012196ff01b1374d83bc0ac" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateLocalRot0Attr</name></member>
      <member refid="class_usd_physics_joint_1a60ffa625d6ec33dfe3549b2a742bdbbd" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>CreateLocalRot1Attr</name></member>
      <member refid="class_usd_physics_joint_1a67445ed3bbe7f181dc15a9e2b5360bf5" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>Define</name></member>
      <member refid="class_usd_physics_joint_1a46fd6a00ef3658259fa479f8a7a9185c" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>Get</name></member>
      <member refid="class_usd_physics_joint_1ac2593077bb1803f61a6e58dc9ea07420" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetBody0Rel</name></member>
      <member refid="class_usd_physics_joint_1a9f19349e454fcaed39e5c41805a1e584" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetBody1Rel</name></member>
      <member refid="class_usd_physics_joint_1a07783b09c7b783d2df591b797defaae1" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetBreakForceAttr</name></member>
      <member refid="class_usd_physics_joint_1abbf7f7d4e01ebacfbf641b899acd91d3" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetBreakTorqueAttr</name></member>
      <member refid="class_usd_physics_joint_1a0f14d3a308d85b8dcb2104e2f77942f0" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetCollisionEnabledAttr</name></member>
      <member refid="class_usd_physics_joint_1a703731dd841f8882e4fec9ba6b4f0bfa" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetExcludeFromArticulationAttr</name></member>
      <member refid="class_usd_physics_joint_1ae66db905deb63d4c9de399e13675506e" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetJointEnabledAttr</name></member>
      <member refid="class_usd_physics_joint_1ad1272cea9e07d866be6868fff1ee7651" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetLocalPos0Attr</name></member>
      <member refid="class_usd_physics_joint_1ab91e286a17446ebaea8f19778d4910ff" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetLocalPos1Attr</name></member>
      <member refid="class_usd_physics_joint_1a186dd00c84e66194a2d55ef904445ffb" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetLocalRot0Attr</name></member>
      <member refid="class_usd_physics_joint_1a1a4ab96edf8d6922ba2f75c5d369c8be" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetLocalRot1Attr</name></member>
      <member refid="class_usd_physics_joint_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_physics_joint_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>schemaType</name></member>
      <member refid="class_usd_physics_joint_1ae319694b2fe1a6bdc26c2cad77ce44ef" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>UsdPhysicsJoint</name></member>
      <member refid="class_usd_physics_joint_1a3cabb7cdfb60fcaadbaba28a25c7542e" prot="public" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>UsdPhysicsJoint</name></member>
      <member refid="class_usd_physics_joint_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdPhysicsJoint</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_physics_joint_1ada6aa415b33d1b52959abd4551a49a95" prot="public" virt="virtual"><scope>UsdPhysicsJoint</scope><name>~UsdPhysicsJoint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
