<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_usd_physics_scene" kind="class" prot="public">
    <compoundname>UsdPhysicsScene</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdTyped</basecompoundref>
    <includes refid="scene_8h" local="no">scene.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_physics_scene_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::ConcreteTyped</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="63" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/scene.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_physics_scene_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="141" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/scene.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_physics_scene_1ab3ea8c667f347ded937edb02b3472bf6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsScene</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdPhysicsScene</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_scene" kindref="compound">UsdPhysicsScene</ref> on UsdPrim <computeroutput>prim</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_physics_scene_1a45d7094a5db2330fb241533372fd48da" kindref="member">UsdPhysicsScene::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="69" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/scene.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1acd025b94b697ccacb4f7033ade982cfa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsScene</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdPhysicsScene</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_scene" kindref="compound">UsdPhysicsScene</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_physics_scene" kindref="compound">UsdPhysicsScene</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="77" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/scene.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1a76fe28fb3bf2e061d8ad7726d2e1cfa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API</type>
        <definition>virtual USDPHYSICS_API ~UsdPhysicsScene</definition>
        <argsstring>()</argsstring>
        <name>~UsdPhysicsScene</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1acc0b83715fe8601483d766014d885b71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetGravityDirectionAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetGravityDirectionAttr</name>
        <briefdescription>
<para>Gravity direction vector in simulation world space. </para>        </briefdescription>
        <detaileddescription>
<para>Will be normalized before use. A zero vector is a request to use the negative upAxis. Unitless.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>vector3f physics:gravityDirection = (0, 0, 0)</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>GfVec3f </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Vector3f </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1ab78ab82f8ffc798d4bea55815dd4a56f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateGravityDirectionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateGravityDirectionAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_scene_1acc0b83715fe8601483d766014d885b71" kindref="member">GetGravityDirectionAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1aca127b76a9afbd6b2a8e54e5af45c784" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute GetGravityMagnitudeAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetGravityMagnitudeAttr</name>
        <briefdescription>
<para>Gravity acceleration magnitude in simulation world space. </para>        </briefdescription>
        <detaileddescription>
<para>A negative value is a request to use a value equivalent to earth gravity regardless of the metersPerUnit scaling used by this scene. Units: distance/time/time.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physics:gravityMagnitude = -inf</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1a444bc35e6e5d23c13d8f24a9a94191d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdAttribute</type>
        <definition>USDPHYSICS_API UsdAttribute CreateGravityMagnitudeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateGravityMagnitudeAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_scene_1aca127b76a9afbd6b2a8e54e5af45c784" kindref="member">GetGravityMagnitudeAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_physics_scene_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfTokenVector &amp;</type>
        <definition>static USDPHYSICS_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1a45d7094a5db2330fb241533372fd48da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_scene" kindref="compound">UsdPhysicsScene</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsScene Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_scene" kindref="compound">UsdPhysicsScene</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/><ref refid="class_usd_physics_scene_1ab3ea8c667f347ded937edb02b3472bf6" kindref="member">UsdPhysicsScene</ref>(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1a77f4a9212a0eab31dc1613f2d2a6e61e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_scene" kindref="compound">UsdPhysicsScene</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsScene Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis>UsdPrim</emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to UsdPrim::IsDefined()) on this stage. </para>        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis>SdfPrimSpec</emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis>SdfPrimSpec</emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para><para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para><para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current UsdEditTarget&apos;s namespace) issue an error and return an invalid <emphasis>UsdPrim</emphasis>.</para><para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_physics_scene_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API UsdSchemaType</type>
        <definition>USDPHYSICS_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="137" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_physics_scene_1adade0ff4639afd184e30c5708ae86f8d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>static USDPHYSICS_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_scene_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_physics_scene_1a96538019a0566b8f54f05953ac1c6615" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const TfType &amp;</type>
        <definition>USDPHYSICS_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="149" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Prim to define general physics simulation properties. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="W:/919a5455eee1e83c/src/usdPhysics/scene.h" line="58" column="1" bodyfile="W:/919a5455eee1e83c/src/usdPhysics/scene.h" bodystart="57" bodyend="212"/>
    <listofallmembers>
      <member refid="class_usd_physics_scene_1a14550550753e6be849eb8e7d9607f2d5" prot="protected" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_physics_scene_1adade0ff4639afd184e30c5708ae86f8d" prot="private" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_physics_scene_1a96538019a0566b8f54f05953ac1c6615" prot="private" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>_GetTfType</name></member>
      <member refid="class_usd_physics_scene_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_physics_scene_1ab78ab82f8ffc798d4bea55815dd4a56f" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>CreateGravityDirectionAttr</name></member>
      <member refid="class_usd_physics_scene_1a444bc35e6e5d23c13d8f24a9a94191d0" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>CreateGravityMagnitudeAttr</name></member>
      <member refid="class_usd_physics_scene_1a77f4a9212a0eab31dc1613f2d2a6e61e" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>Define</name></member>
      <member refid="class_usd_physics_scene_1a45d7094a5db2330fb241533372fd48da" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>Get</name></member>
      <member refid="class_usd_physics_scene_1acc0b83715fe8601483d766014d885b71" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>GetGravityDirectionAttr</name></member>
      <member refid="class_usd_physics_scene_1aca127b76a9afbd6b2a8e54e5af45c784" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>GetGravityMagnitudeAttr</name></member>
      <member refid="class_usd_physics_scene_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_physics_scene_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>schemaType</name></member>
      <member refid="class_usd_physics_scene_1ab3ea8c667f347ded937edb02b3472bf6" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>UsdPhysicsScene</name></member>
      <member refid="class_usd_physics_scene_1acd025b94b697ccacb4f7033ade982cfa" prot="public" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>UsdPhysicsScene</name></member>
      <member refid="class_usd_physics_scene_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdPhysicsScene</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_physics_scene_1a76fe28fb3bf2e061d8ad7726d2e1cfa4" prot="public" virt="virtual"><scope>UsdPhysicsScene</scope><name>~UsdPhysicsScene</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
