<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="class_physx_schema_physx_vehicle_a_p_i" kind="class" prot="public">
    <compoundname>PhysxSchemaPhysxVehicleAPI</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="physx_vehicle_a_p_i_8h" local="no">physxVehicleAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_physx_schema_physx_vehicle_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" static="yes" mutable="no">
        <type>const UsdSchemaType</type>
        <definition>const UsdSchemaType schemaType</definition>
        <argsstring></argsstring>
        <name>schemaType</name>
        <initializer>= UsdSchemaType::SingleApplyAPI</initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="68" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_physx_schema_physx_vehicle_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="139" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a2173d63651095dbb6c74fc14a98b138f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PhysxSchemaPhysxVehicleAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>PhysxSchemaPhysxVehicleAPI</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
          <defval>UsdPrim()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref> on UsdPrim <computeroutput>prim</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_physx_schema_physx_vehicle_a_p_i_1af7a765811712881b3dc5ae0d96ae447a" kindref="member">PhysxSchemaPhysxVehicleAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="74" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1aeaa37f7cf34b921effcdf2f8465f93c4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PhysxSchemaPhysxVehicleAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>PhysxSchemaPhysxVehicleAPI</name>
        <param>
          <type>const UsdSchemaBase &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="82" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a7691f237aa636a40ba946396c74e341b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>PHYSXSCHEMA_API</type>
        <definition>virtual PHYSXSCHEMA_API ~PhysxSchemaPhysxVehicleAPI</definition>
        <argsstring>()</argsstring>
        <name>~PhysxSchemaPhysxVehicleAPI</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a1ff72e96baa6aca8148e1178a68e5e73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetVehicleEnabledAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetVehicleEnabledAttr</name>
        <briefdescription>
<para>Defines whether the vehicle simulation update loop will run for the vehicle or not. </para>        </briefdescription>
        <detaileddescription>
<para>Note: if set to false, the prim&apos;s rigid body will still get simulated (the PhysicsRigidBodyAPI API schema can be used to turn the body into a kinematic or set velocities to zero at that point).</para><para>Note: it is an illegal setup to have a vehicle enabled, while the prim&apos;s rigid body is disabled or kinematic.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>bool physxVehicle:vehicleEnabled = 1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>bool </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1af56548c86bb51777d16bdccc275975e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateVehicleEnabledAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateVehicleEnabledAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1a1ff72e96baa6aca8148e1178a68e5e73" kindref="member">GetVehicleEnabledAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1acc94e5d2b87c86cd8c3911119eb8553a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetSuspensionLineQueryTypeAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetSuspensionLineQueryTypeAttr</name>
        <briefdescription>
<para>Collision of the wheels with the ground surface is detected through scene queries along the suspension direction. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute defines whether a raycast or a sweep should be used as the query type. Raycasts are faster while sweeps can represent the wheel shape better and thus react earlier to ground surface changes.</para><para>Note: to use sweeps, all wheels need to have collision geometry defined (either a convex mesh that was generated from a mesh, a capsule or a sphere).</para><para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>uniform token physxVehicle:suspensionLineQueryType = &quot;raycast&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>TfToken </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token </para></entry></row>
<row>
<entry thead="no"><para>Variability </para></entry><entry thead="no"><para>SdfVariabilityUniform </para></entry></row>
<row>
<entry thead="no"><para><ref refid="physx_schema_2tokens_8h_1a393f20ccb3241cdd3a3884bd0041317b" kindref="member">Allowed Values</ref> </para></entry><entry thead="no"><para>raycast, sweep </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a9fb9866c0fb9f55fc35d50579df87f62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateSuspensionLineQueryTypeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateSuspensionLineQueryTypeAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1acc94e5d2b87c86cd8c3911119eb8553a" kindref="member">GetSuspensionLineQueryTypeAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1afde47d463d64c490a4c6308ab7254b5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetSubStepThresholdLongitudinalSpeedAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetSubStepThresholdLongitudinalSpeedAttr</name>
        <briefdescription>
<para>Threshold speed that is used to categorize vehicle speed as low speed or high speed for choosing the sub-step count. </para>        </briefdescription>
        <detaileddescription>
<para>Note: if not defined, the value 5.0 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicle:subStepThresholdLongitudinalSpeed</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a217915758188790c81731ad1ef1eae82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateSubStepThresholdLongitudinalSpeedAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateSubStepThresholdLongitudinalSpeedAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1afde47d463d64c490a4c6308ab7254b5f" kindref="member">GetSubStepThresholdLongitudinalSpeedAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1ad0c9fc3fd5892ef2c3b98e91ab707b67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetLowForwardSpeedSubStepCountAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetLowForwardSpeedSubStepCountAttr</name>
        <briefdescription>
<para>Number of sub-steps performed in the vehicle dynamics update for vehicles that have longitudinal speed lower than subStepThresholdLongitudinalSpeed. </para>        </briefdescription>
        <detaileddescription>
<para>Note: if not defined, the value 3 will be used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>int physxVehicle:lowForwardSpeedSubStepCount</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>int </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Int </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a0e61f317785761a451d713ad08f8a4f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateLowForwardSpeedSubStepCountAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateLowForwardSpeedSubStepCountAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1ad0c9fc3fd5892ef2c3b98e91ab707b67" kindref="member">GetLowForwardSpeedSubStepCountAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a2b1c2375a4cfe0d8498dab6ab7eabdc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetHighForwardSpeedSubStepCountAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetHighForwardSpeedSubStepCountAttr</name>
        <briefdescription>
<para>Number of sub-steps performed in the vehicle dynamics update for vehicles that have longitudinal speed greater than subStepThresholdLongitudinalSpeed. </para>        </briefdescription>
        <detaileddescription>
<para>Note: if not defined, the value 1 will be used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>int physxVehicle:highForwardSpeedSubStepCount</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>int </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Int </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1aa2faed34197cb710122ffc0bb99401ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateHighForwardSpeedSubStepCountAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateHighForwardSpeedSubStepCountAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1a2b1c2375a4cfe0d8498dab6ab7eabdc9" kindref="member">GetHighForwardSpeedSubStepCountAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a42cee0de967026e71de963f911e11a97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute GetMinLongitudinalSlipDenominatorAttr</definition>
        <argsstring>() const </argsstring>
        <name>GetMinLongitudinalSlipDenominatorAttr</name>
        <briefdescription>
<para>The minimum denominator used in the longitudinal slip calculation. </para>        </briefdescription>
        <detaileddescription>
<para>For low longitudinal velocities, the computation of the longitudinal slip can become unstable. This value defines the minimum velocity to use when computing the longitudinal slip.</para><para>Note: if not defined, the value 4.0 will be used. This default value is in meter length scale and will get adjusted if another unit is used.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para></para></entry></row>
<row>
<entry thead="no"><para>Declaration </para></entry><entry thead="no"><para><computeroutput>float physxVehicle:minLongitudinalSlipDenominator</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>C++ Type </para></entry><entry thead="no"><para>float </para></entry></row>
<row>
<entry thead="no"><para>Usd Type </para></entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a0649ad5950929294f77907fde6378f2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdAttribute</type>
        <definition>PHYSXSCHEMA_API UsdAttribute CreateMinLongitudinalSlipDenominatorAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const </argsstring>
        <name>CreateMinLongitudinalSlipDenominatorAttr</name>
        <param>
          <type>VtValue const &amp;</type>
          <declname>defaultValue</declname>
          <defval>VtValue()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1a42cee0de967026e71de963f911e11a97" kindref="member">GetMinLongitudinalSlipDenominatorAttr()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a3c5607d792a24fae5270cbc7d94de60b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdRelationship</type>
        <definition>PHYSXSCHEMA_API UsdRelationship GetDriveRel</definition>
        <argsstring>() const </argsstring>
        <name>GetDriveRel</name>
        <briefdescription>
<para>A relationship to a PhysxVehicleDriveBasicAPI or PhysxVehicleDriveStandardAPI prim that describes the drive model. </para>        </briefdescription>
        <detaileddescription>
<para>If none is specified, it is up to the user to apply torque to the wheels. It is also possible to apply PhysxVehicleDriveBasicAPI or PhysxVehicleDriveStandardAPI to the prim directly. In that case the relationship must not be defined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a6bf9f17433ceab18385035cc0fc875d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdRelationship</type>
        <definition>PHYSXSCHEMA_API UsdRelationship CreateDriveRel</definition>
        <argsstring>() const </argsstring>
        <name>CreateDriveRel</name>
        <briefdescription>
<para>See <ref refid="class_physx_schema_physx_vehicle_a_p_i_1a3c5607d792a24fae5270cbc7d94de60b" kindref="member">GetDriveRel()</ref>, and also Usd_Create_Or_Get_Property for when to use Get vs Create. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="323" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a4acc8a487a53fd3129d77bb286d75140" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfTokenVector &amp;</type>
        <definition>static PHYSXSCHEMA_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1af7a765811712881b3dc5ae0d96ae447a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxVehicleAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const SdfPath &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para><para><programlisting><codeline><highlight class="normal">*<sp/><sp/><ref refid="class_physx_schema_physx_vehicle_a_p_i_1a2173d63651095dbb6c74fc14a98b138f" kindref="member">PhysxSchemaPhysxVehicleAPI</ref>(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
<codeline><highlight class="normal">*<sp/><sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a41a215addbe06c9e106f7fc0573dfc52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref></type>
        <definition>static PHYSXSCHEMA_API PhysxSchemaPhysxVehicleAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const UsdPrim &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;PhysxVehicleAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para><para><simplesect kind="return"><para>A valid <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_physx_schema_physx_vehicle_a_p_i" kindref="compound">PhysxSchemaPhysxVehicleAPI</ref> object is returned upon failure. See UsdPrim::ApplyAPI() for conditions resulting in failure.</para></simplesect>
<simplesect kind="see"><para>UsdPrim::GetAppliedSchemas() </para><simplesectsep/><para>UsdPrim::HasAPI() </para><simplesectsep/><para>UsdPrim::ApplyAPI() </para><simplesectsep/><para>UsdPrim::RemoveAPI() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="128" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a1cf3042cb6534cfb5768a029099cd2f1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API UsdSchemaType</type>
        <definition>PHYSXSCHEMA_API UsdSchemaType _GetSchemaType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaType</name>
        <briefdescription>
<para>Returns the type of schema this class belongs to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdSchemaType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1a3014e93c3ab2a0b4770d0ce561a03b9d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfType &amp;</type>
        <definition>static PHYSXSCHEMA_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_physx_schema_physx_vehicle_a_p_i_1ac9917b582d82c9a980c227a7de3d4352" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PHYSXSCHEMA_API const TfType &amp;</type>
        <definition>PHYSXSCHEMA_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PhysX vehicle. </para>    </briefdescription>
    <detaileddescription>
<para>Has to be applied to a prim with PhysicsRigidBodyAPI applied. Wheels can be added by applying PhysxVehicleWheelAttachmentAPI to a prim that is a descendant of the &quot;vehicle&quot; prim.</para><para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="physx_schema_2tokens_8h_1a393f20ccb3241cdd3a3884bd0041317b" kindref="member">PhysxSchemaTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use PhysxSchemaTokens-&gt;rightHanded as the value. </para>    </detaileddescription>
    <location file="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" line="63" column="1" bodyfile="W:/919a5455eee1e83c/src/physxSchema/physxVehicleAPI.h" bodystart="62" bodyend="336"/>
    <listofallmembers>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a1cf3042cb6534cfb5768a029099cd2f1" prot="protected" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a3014e93c3ab2a0b4770d0ce561a03b9d" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1ac9917b582d82c9a980c227a7de3d4352" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>_GetTfType</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a41a215addbe06c9e106f7fc0573dfc52" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>Apply</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a6bf9f17433ceab18385035cc0fc875d3" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateDriveRel</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1aa2faed34197cb710122ffc0bb99401ba" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateHighForwardSpeedSubStepCountAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a0e61f317785761a451d713ad08f8a4f3" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateLowForwardSpeedSubStepCountAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a0649ad5950929294f77907fde6378f2f" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateMinLongitudinalSlipDenominatorAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a217915758188790c81731ad1ef1eae82" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateSubStepThresholdLongitudinalSpeedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a9fb9866c0fb9f55fc35d50579df87f62" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateSuspensionLineQueryTypeAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1af56548c86bb51777d16bdccc275975e8" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>CreateVehicleEnabledAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1af7a765811712881b3dc5ae0d96ae447a" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>Get</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a3c5607d792a24fae5270cbc7d94de60b" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetDriveRel</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a2b1c2375a4cfe0d8498dab6ab7eabdc9" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetHighForwardSpeedSubStepCountAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1ad0c9fc3fd5892ef2c3b98e91ab707b67" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetLowForwardSpeedSubStepCountAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a42cee0de967026e71de963f911e11a97" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetMinLongitudinalSlipDenominatorAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a4acc8a487a53fd3129d77bb286d75140" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1afde47d463d64c490a4c6308ab7254b5f" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetSubStepThresholdLongitudinalSpeedAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1acc94e5d2b87c86cd8c3911119eb8553a" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetSuspensionLineQueryTypeAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a1ff72e96baa6aca8148e1178a68e5e73" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>GetVehicleEnabledAttr</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a2173d63651095dbb6c74fc14a98b138f" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>PhysxSchemaPhysxVehicleAPI</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1aeaa37f7cf34b921effcdf2f8465f93c4" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>PhysxSchemaPhysxVehicleAPI</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1aac43c1afa0b9b55b44c30dc3bb91b0e7" prot="public" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>schemaType</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_physx_schema_physx_vehicle_a_p_i_1a7691f237aa636a40ba946396c74e341b" prot="public" virt="virtual"><scope>PhysxSchemaPhysxVehicleAPI</scope><name>~PhysxSchemaPhysxVehicleAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
