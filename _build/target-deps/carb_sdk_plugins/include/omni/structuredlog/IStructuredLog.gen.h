// Copyright (c) 2020-2022, NVIDIA CORPORATION. All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto. Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.
//
// --------- Warning: This is a build system generated file. ----------
//

//! @file
//!
//! @brief This file was generated by <i>omni.bind</i>.

#include <omni/core/OmniAttr.h>
#include <omni/core/Interface.h>
#include <omni/core/ResultError.h>

#include <functional>
#include <utility>
#include <type_traits>

#ifndef OMNI_BIND_INCLUDE_INTERFACE_IMPL


/** Main structured log interface.  This should be treated internally as a global singleton.  Any
 *  attempt to create or acquire this interface will return the same object just with a new
 *  reference taken on it.
 *
 *  There are three main steps to using this interface:
 *    * Set up the interface.  For most app's usage, all of the default settings will suffice.
 *      The default log path will point to the Omniverse logs folder and the default user ID
 *      will be the one read from the current user's privacy settings file (if it exists).  If
 *      the default values for these is not sufficient, a new user ID should be set with
 *      @ref omni::structuredlog::IStructuredLogSettings::setUserId() and a log output path should be set with
 *      @ref omni::structuredlog::IStructuredLogSettings::setLogOutputPath().
 *      If the privacy settings file is not present,
 *      the user name will default to a random number.  The other defaults should be sufficient
 *      for most apps.  This setup only needs to be performed once by the host app if at all.
 *      The @ref omni::structuredlog::IStructuredLogSettings interface can be acquired either
 *      by casting an @ref omni::structuredlog::IStructuredLog
 *      object to that type or by directly creating the @ref omni::structuredlog::IStructuredLogSettings
 *      object using omni::core::ITypeFactory_abi::createType().
 *    * Register one or more event schemas.
 *      This is done with @ref omni::structuredlog::IStructuredLog::allocSchema() and
 *      @ref omni::structuredlog::IStructuredLog::commitSchema().
 *      At least one event must be registered for any events to
 *      be processed.  Once a schema has been registered, it will remain valid until the
 *      structured log module is unloaded from the process.  There is no way to forcibly
 *      unregister a set of events once registered.
 *    * Send zero or more events.  This is done with the @ref omni::structuredlog::IStructuredLog::allocEvent() and
 *      @ref omni::structuredlog::IStructuredLog::commitEvent() functions.
 *
 *  For the most part, the use of this interface will be dealt with in generated code.  This
 *  generated code will come from the 'omni.structuredlog' tool in the form of an inlined header
 *  file.  It is the host app's responsibility to call the header's schema registration helper
 *  function at some point on startup before any event helper functions are called.
 *
 *  All messages generated by this structured log system will be CloudEvents v1.0 compliant.
 *  These should be parseable by any tool that is capable of understanding CloudEvents.
 *
 *  Before an event can be sent, at least one schema describing at least one event must be
 *  registered.  This is done with the @ref omni::structuredlog::IStructuredLog::allocSchema() and
 *  @ref omni::structuredlog::IStructuredLog::commitSchema() functions.
 *  The @ref omni::structuredlog::IStructuredLog::allocSchema() function returns
 *  a handle to a block of memory owned by the structured log system and a pointer to that block's
 *  data.  The caller is responsible for both calculating the required size of the buffer before
 *  allocating, and filling it in with the schema data trees for each event that can be sent as
 *  part of that schema.  The helper functions in @ref omni::structuredlog::JsonTreeSizeCalculator and
 *  @ref omni::structuredlog::JsonBuilder can be used to build these trees.  Once these trees are built, they are
 *  stored in a number of entries in an array of @ref omni::structuredlog::EventInfo objects.  This array of event
 *  info objects is then passed to @ref omni::structuredlog::IStructuredLog::commitSchema() to complete the schema
 *  registration process.
 *
 *  Sending of a message is split into two parts for efficiency.  The general idea is that the
 *  caller will allocate a block of memory in the event queue's buffer and write its data directly
 *  there.
 *  The allocation occurs with the @ref omni::structuredlog::IStructuredLog::allocEvent() call.
 *  This will return a
 *  handle to the allocated block and a pointer to the first byte to start writing the payload
 *  data to.  The buffer's header will already have been filled in upon return from
 *  @ref omni::structuredlog::IStructuredLog::allocEvent().
 *  Once the caller has written its event payload information to
 *  the buffer, it will call @ref omni::structuredlog::IStructuredLog::commitEvent()
 *  to commit the message to the queue.  At
 *  this point, the message can be consumed by the event processing thread.
 *
 *  Multiple events may be safely allocated from and written to the queue's buffer simultaneously.
 *  There is no required order that the messages be committed in however.  If a buffer is
 *  allocated after one that has not been committed yet, and that newer event is committed first,
 *  the only side effect will be that the event processing thread will be stalled in processing
 *  new events until the first message is also committed.  This is important since the events
 *  would still need to be committed to the log in the correct order.
 *
 *  All events that are processed through this interface will be written to a local log file.  The
 *  log file will be periodically consumed by an external process (the Omniverse Transmitter app)
 *  that will send all the approved events to the telemetry servers.  Only events that have been
 *  approved by legal will be sent.  All other messages will be rejected and only remain in the
 *  log files on the local machine.
 */
template <>
class omni::core::Generated<omni::structuredlog::IStructuredLog_abi> : public omni::structuredlog::IStructuredLog_abi
{
public:
    OMNI_PLUGIN_INTERFACE("omni::structuredlog::IStructuredLog")

    /** Checks whether a specific event or schema is enabled.
     *
     *  @param[in] eventId  The unique ID of the event to check the enable state of.  This
     *                      is the ID that was originally used to register the event.
     *  @returns `true` if both the requested event and its schema is enabled.
     *  @returns `false` if either the requested event or its schema is disabled.
     *
     *  @remarks This checks if a named event or its schema is currently enabled in the structured
     *           log system.  Individual events or entire schemas may be disabled at any given
     *           time.  Both the schema and each event has its own enable state.  A schema can be
     *           disabled while still leaving its events' previous enable/disable states
     *           unmodified.  When the schema is enabled again, its events will still retain their
     *           previous enable states.  Set @ref omni::structuredlog::IStructuredLog::setEnabled()
     *           for more information on how to enable and disable events and schemas.
     */
    bool isEnabled(omni::structuredlog::EventId eventId) noexcept;

    /** Sets the enable state for a structured log event or schema, or the system globally.
     *
     *  @param[in] eventId  The ID of the event to change the enable state of.  This is the ID
     *                      that was originally used to register the event.  If the
     *                      @ref omni::structuredlog::fEnableFlagAll flag is used, this must be
     *                      set to @ref omni::structuredlog::kBadEventId.
     *  @param[in] flags    Flags to control the behaviour of this function.  This may be zero or
     *                      more of the @ref omni::structuredlog::EnableFlags flags.
     *                      If this includes the @ref omni::structuredlog::fEnableFlagAll
     *                      flag, @p eventId must be set to @ref omni::structuredlog::kBadEventId.
     *  @param[in] enabled  Set to true to enable the named event or schema.  Set to false to
     *                      disable the named event or schema.  If the
     *                      @ref omni::structuredlog::fEnableFlagAll flag is used, this sets the
     *                      new enable/disable state for the structured log system as a whole.
     *  @returns No return value.
     *
     *  @remarks This changes the current enable state for an event or schema.  The scope of the
     *           enable change depends on the flags that are passed in.  When an event is
     *           disabled (directly or from its schema or the structured log system being
     *           disabled), it will also prevent it from being generated manually.  In this case,
     *           any attempt to call @ref omni::structuredlog::IStructuredLog::allocEvent() for
     *           that disabled event or schema will simply fail immediately.
     *
     *  @remarks When a schema is disabled, it effectively disables all of its events.  Depending
     *           on the flag usage however (ie: @ref omni::structuredlog::fEnableFlagOverrideEnableState),
     *           disabling the schema may or may not change the enable states of each of its
     *           individual events as well (see @ref omni::structuredlog::fEnableFlagOverrideEnableState
     *           for more information).
     *
     *  @note The @ref omni::structuredlog::fEnableFlagAll flag should only ever by used by the
     *        main host app since this will affect the behaviour of all modules' events regardless
     *        of their own internal state.  Disabling the entire system should also only ever be
     *        used sparingly in cases where it is strictly necessary (ie: compliance with local
     *        privacy laws).
     */
    void setEnabled(omni::structuredlog::EventId eventId, omni::structuredlog::EnableFlags flags, bool enabled) noexcept;

    /** Allocates a block of memory for an event schema.
     *
     *  @param[in] schemaName       The name of the schema being registered.  This may not be
     *                              nullptr or an empty string.  There is no set format for this
     *                              schema name, but it should at least convey some information
     *                              about the app's name and current release version.  This name
     *                              will be used to construct the log file name for the schema.
     *  @param[in] schemaVersion    The version number for the schema itself.  This may not be
     *                              nullptr or an empty string.  This should be the version number
     *                              of the schema itself, not of the app or component.  This will
     *                              be used to construct the 'dataschema' name that gets passed
     *                              along with each CloudEvents message header.
     *  @param[in] flags            Flags to control the behaviour of the schema.  This may be
     *                              zero or more of the @ref omni::structuredlog::SchemaFlags flags.
     *  @param[in] size             The size of the block to allocate in bytes.  If this is 0, a
     *                              block will still be allocated, but its actual size cannot be
     *                              guaranteed.  The @ref omni::structuredlog::JsonTreeSizeCalculator
     *                              helper class can be used to calculate the size needs for the new schema.
     *  @param[out] outHandle       Receives the handle to the allocated memory block on success.
     *                              On failure, this receives nullptr.  Each successful call
     *                              must pass this handle to @ref omni::structuredlog::IStructuredLog::commitSchema()
     *                              even if an intermediate failure occurs.  In the case of a schema
     *                              tree creation failure, nullptr should be passed for @a events
     *                              in the corresponding @ref omni::structuredlog::IStructuredLog::commitSchema() call.
     *                              This will allow the allocated block to be cleaned up.
     *  @returns A pointer to the allocated block on success.  This block does not need to be
     *           explicitly freed - it will be managed internally.  This pointer will point to
     *           the first byte that can be written to by the caller and will be at least @p size
     *           bytes in length.  This pointer will always be aligned to the size of a pointer.
     *  @returns `nullptr` if no more memory is available.
     *  @returns `nullptr` if an invalid parameter is passed in.
     *
     *  @remarks This allocates a block of memory that the schema tree(s) for the event(s) in a
     *           schema can be created and stored in.  Pointers to the start of each event schema
     *           within this block are expected to be stored in one of the @ref omni::structuredlog::EventInfo objects
     *           that will later be passed to @ref omni::structuredlog::IStructuredLog::commitSchema().  The caller is
     *           responsible for creating and filling in returned block and the array of
     *           @ref omni::structuredlog::EventInfo objects.
     *           The @ref omni::structuredlog::BlockAllocator helper class may be used to
     *           allocate smaller chunks of memory from the returned block.
     *
     *  @note This should only be used in generated structured log source code.  This should not
     *        be directly except when absolutely necessary.  This should also not be used as a
     *        generic allocator.  Failure to use this properly will result in memory being
     *        leaked.
     *
     *  @thread_safety This call is thread safe.
     */
    uint8_t* allocSchema(const char* schemaName,
                         const char* schemaVersion,
                         omni::structuredlog::SchemaFlags flags,
                         size_t size,
                         omni::structuredlog::AllocHandle* outHandle) noexcept;

    /** Commits an allocated block and registers events for a single schema.
     *
     *  @param[in] schemaBlock  The block previously returned from
     *                          @ref omni::structuredlog::IStructuredLog::allocSchema()
     *                          that contains the built event trees for the schema to register.
     *                          These trees must be pointed to by the @ref omni::structuredlog::EventInfo::schema
     *                          members of the @p events array.
     *  @param[in] events       The table of events that belong to this schema.  This provides
     *                          information about each event such as its name, control flags,
     *                          event identifier, and a schema describing how to interpret its
     *                          binary blob on the consumer side.  This may not be nullptr.  Each
     *                          of the trees pointed to by @ref omni::structuredlog::EventInfo::schema in this table
     *                          must either be set to nullptr or point to an address inside the
     *                          allocated schema block @p schemaBlock that was returned from the
     *                          corresponding call to @ref omni::structuredlog::IStructuredLog::allocSchema().
     *                          If any of the schema trees point to an address outside of the schema block,
     *                          this call will fail.
     *  @param[in] eventCount   The total number of events in the @p events table.  At least one
     *                          event must be registered.  This may not be 0.
     *  @returns @ref omni::structuredlog::SchemaResult::eSuccess if the new schema
     *           is successfully registered as a set of unique events.
     *  @returns @ref omni::structuredlog::SchemaResult::eAlreadyExists if the new
     *           schema exactly matches one that has already been successfully registered.
     *           This can be considered a successful result.
     *           In this case, the schema block will be destroyed before return.
     *  @returns @ref omni::structuredlog::SchemaResult::eEventIdCollision if the new schema contains an event whose
     *           identifier matches that of an event that has already been registered with another
     *           schema.  This indicates that the name of the event that was used to generate the
     *           identifier was likely not unique enough, or that two different versions of the
     *           same schema are trying to be registered without changing the schema's version
     *           number first.  No new events will be registered in this case and the schema
     *           block will be destroyed before return.
     *  @returns @ref omni::structuredlog::SchemaResult::eFlagsDiffer if the new schema exactly matches another schema
     *           that has already been registered except for the schema flags that were used
     *           in the new one.  This is not allowed without a version change in the new schema.
     *           No new events will be registered in this case and the schema block will be
     *           destroyed before return.
     *  @returns Another @ref omni::structuredlog::SchemaResult error code for other types of failures.  No new events
     *           will be registered in this case and the schema block will be destroyed before
     *           return.
     *
     *  @remarks This registers a new schema and its events with the structured log system.  This
     *           will create a new set of events in the structured log system.  These events
     *           cannot be unregistered except by unloading the entire structured log system
     *           altogether.  Upon successful registration, the events in the schema can be
     *           emitted using the event identifiers they were registered with.
     *
     *  @remarks If the new schema matchces one that has already been registered, The operation
     *           will succeed with the result @ref omni::structuredlog::SchemaResult::eAlreadyExists.
     *           The existing
     *           schema's name, version, flags, and event table (including order of events) must
     *           match the new one exactly in order to be considered a match.  If anything differs
     *           (even the flags for a single event or events out of order but otherwise the same
     *           content), the call will fail.  If the schema with the differing flags or event
     *           order is to be used, its version or name must be changed to avoid conflict with
     *           the existing schema.
     *
     *  @remarks When generating the event identifiers for @ref omni::structuredlog::EventInfo::eventId it is
     *           recommended that a string uniquely identifying the event be created then hashed
     *           using an algorithm such as FNV1.  The string should contain the schema's client
     *           name, the event's name, the schema's version, and any other values that may
     *           help to uniquely identify the event.  Once hashed, it is very unlikely that
     *           the event identifier will collide with any others.  This is the method that the
     *           code generator tool uses to create the unique event identifiers.
     *
     *  @remarks Up to 65536 (ie: 16-bit index values) events may be registered with the
     *           structured log system.  The performance of managing a list of events this large
     *           is unknown and not suggested however.  Each module, app, or component should only
     *           register its schema(s) once on startup.  This can be a relatively expensive
     *           operation if done frequently and unnecessarily.
     *
     *  @thread_safety This call is thread safe.
     */
    omni::structuredlog::SchemaResult commitSchema(omni::structuredlog::AllocHandle schemaBlock,
                                                   const omni::structuredlog::EventInfo* events,
                                                   size_t eventCount) noexcept;

    /** Allocates a block of memory to store an event's payload data in.
     *
     *  @param[in]  version     The version of the parser that should be used to read this
     *                          event's payload data.  This should be @ref omni::structuredlog::kParserVersion.
     *                          If the structured log system that receives this message does not
     *                          support this particular version (ie: a newer module is run
     *                          on an old structured log system), the event message will simply
     *                          be dropped.
     *  @param[in]  eventId     the unique ID of the event that is being generated.  This ID must
     *                          exactly match the event ID that was provided in the
     *                          @ref omni::structuredlog::EventInfo::eventId value when the event
     *                          was registered.
     *  @param[in]  flags       Flags to control how the event's block is allocated.  This may
     *                          be a combination of zero or more of the @ref omni::structuredlog::AllocFlags
     *                          flags.
     *  @param[in]  payloadSize The total number of bytes needed to store the event's payload
     *                          data.  The caller is responsible for calculating this ahead
     *                          of time.  If the event does not have a payload, this should be
     *                          0.  The number of bytes should be calculated according to how
     *                          the requested event's schema (ie: @ref omni::structuredlog::EventInfo::schema) lays
     *                          it out in memory.
     *  @param[out] outHandle   Receives the handle to the allocated block of memory.  This
     *                          must be passed to IStructuredLog::commitEvent() once the caller
     *                          has finished writing all of the payload data to the returned
     *                          buffer.  The IStructuredLog::commitEvent() call acts as the
     *                          cleanup function for this handle.
     *  @returns A pointer to the buffer to use for the event's payload data if successfully
     *           allocated.  The caller should start writing its payload data at this address
     *           according to the formatting information in the requested event's schema.  This
     *           returned pointer will always be aligned to the size of a pointer.
     *  @returns `nullptr` if the requested event, its schema, or the entire system is currently
     *           disabled.
     *  @returns `nullptr` if the event queue's buffer is full and a buffer of the requested
     *           size could not be allocated.  In this case, a invalid handle will be returned
     *           in @p outHandle.  The IStructuredLog::commitEvent() function does not need to be
     *           called in this case.
     *  @returns `nullptr` if the event queue failed to be created or its processing thread failed
     *           start up.
     *  @returns `nullptr` if the given event ID is not valid.
     *
     *  @remarks This is the main entry point for creating an event message.  This allocates
     *           a block of memory that the caller can fill in with its event payload data.
     *           The caller is expected to fill in this buffer as quickly as possible.  Once
     *           the buffer has been filled, its handle must be passed to the
     *           @ref omni::structuredlog::IStructuredLog::commitEvent() function to finalize and send.
     *           Failing to pass a
     *           valid handle to @ref omni::structuredlog::IStructuredLog::commitEvent() will stall the event queue
     *           indefinitely.
     *
     *  @remarks If the requested event has been marked as 'critical' by using the event flag
     *           @ref omni::structuredlog::fEventFlagCriticalEvent, a blocking allocation will be used here instead.
     *           In this case, this will not fail due to the event queue being out of space.
     *
     *  @note This call will fail immediately if either the requested event, its schema, or
     *        the entire system has been explicitly disabled.  It is the caller's responsibility
     *        to both check the enable state of the event before attempting to send it (ie: to
     *        avoid doing unnecessary work), and to gracefully handle the potential of this
     *        call failing.
     *
     *  @note It is the caller's responsibility to ensure that no events are generated during
     *        C++ static destruction time for the process during shutdown.  Especially on
     *        Windows, doing so could result in an event being allocated but not committed
     *        thereby stalling the event queue.  This could lead to a hang on shutdown.
     *
     *  @thread_safety This call is thread safe.
     */
    uint8_t* allocEvent(omni::structuredlog::ParserVersion version,
                        omni::structuredlog::EventId eventId,
                        omni::structuredlog::AllocFlags flags,
                        size_t payloadSize,
                        omni::structuredlog::AllocHandle* outHandle) noexcept;

    /** finishes writing a message's payload and queues it for processing.
     *
     *  @param[in] handle   The handle to the queue buffer block to be committed.  This must not
     *                      be nullptr.  This must be the same handle that was returned through
     *                      @a outHandle on a recent call to @ref omni::structuredlog::IStructuredLog::allocEvent()
     *                      on this same thread.  Upon return, this handle will be invalid and should be
     *                      discarded by the caller.
     *  @returns No return value.
     *
     *  @remarks This commits a block that was previously allocated on this thread with
     *           @ref omni::structuredlog::IStructuredLog::allocEvent().
     *           It is required that the commit call occur on the
     *           same thread that the matching @ref omni::structuredlog::IStructuredLog::allocEvent()
     *           call was made on.
     *           Each successful @ref omni::structuredlog::IStructuredLog::allocEvent() call must
     *           be paired with exactly one
     *           @ref omni::structuredlog::IStructuredLog::commitEvent() call on the same thread.
     *           Failing to do so would result in the event queue thread stalling.
     *
     *  @thread_safety This call is thread safe.
     */
    void commitEvent(omni::structuredlog::AllocHandle handle) noexcept;
};

#endif

#ifndef OMNI_BIND_INCLUDE_INTERFACE_DECL

inline bool omni::core::Generated<omni::structuredlog::IStructuredLog_abi>::isEnabled(
    omni::structuredlog::EventId eventId) noexcept
{
    return isEnabled_abi(eventId);
}

inline void omni::core::Generated<omni::structuredlog::IStructuredLog_abi>::setEnabled(
    omni::structuredlog::EventId eventId, omni::structuredlog::EnableFlags flags, bool enabled) noexcept
{
    setEnabled_abi(eventId, flags, enabled);
}

inline uint8_t* omni::core::Generated<omni::structuredlog::IStructuredLog_abi>::allocSchema(
    const char* schemaName,
    const char* schemaVersion,
    omni::structuredlog::SchemaFlags flags,
    size_t size,
    omni::structuredlog::AllocHandle* outHandle) noexcept
{
    return allocSchema_abi(schemaName, schemaVersion, flags, size, outHandle);
}

inline omni::structuredlog::SchemaResult omni::core::Generated<omni::structuredlog::IStructuredLog_abi>::commitSchema(
    omni::structuredlog::AllocHandle schemaBlock, const omni::structuredlog::EventInfo* events, size_t eventCount) noexcept
{
    return commitSchema_abi(schemaBlock, events, eventCount);
}

inline uint8_t* omni::core::Generated<omni::structuredlog::IStructuredLog_abi>::allocEvent(
    omni::structuredlog::ParserVersion version,
    omni::structuredlog::EventId eventId,
    omni::structuredlog::AllocFlags flags,
    size_t payloadSize,
    omni::structuredlog::AllocHandle* outHandle) noexcept
{
    return allocEvent_abi(version, eventId, flags, payloadSize, outHandle);
}

inline void omni::core::Generated<omni::structuredlog::IStructuredLog_abi>::commitEvent(
    omni::structuredlog::AllocHandle handle) noexcept
{
    commitEvent_abi(handle);
}

#endif

#undef OMNI_BIND_INCLUDE_INTERFACE_DECL
#undef OMNI_BIND_INCLUDE_INTERFACE_IMPL
static_assert(std::is_standard_layout<omni::structuredlog::EventInfo>::value,
              "omni::structuredlog::EventInfo must be standard layout to be used in ONI ABI");
