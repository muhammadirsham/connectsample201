// Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto. Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.
//
// --------- Warning: This is a build system generated file. ----------
//

//! @file
//!
//! @brief This file was generated by <i>omni.bind</i>.

#include <omni/core/OmniAttr.h>
#include <omni/core/Interface.h>
#include <omni/core/ResultError.h>

#include <functional>
#include <utility>
#include <type_traits>

#ifndef OMNI_BIND_INCLUDE_INTERFACE_IMPL


//! Consumes (i.e. is notified) when an observed ILogChannelFilterList is updated.
//!
//! This object can be attached to multiple ILogChannelFilterList instances.
//!
//! See ILogChannelFilterList::addUpdateConsumer() to add this object to a channel filter list.
template <>
class omni::core::Generated<omni::log::ILogChannelFilterListUpdateConsumer_abi>
    : public omni::log::ILogChannelFilterListUpdateConsumer_abi
{
public:
    OMNI_PLUGIN_INTERFACE("omni::log::ILogChannelFilterListUpdateConsumer")

    //! Invoked when an observed ILogChannelFilterList is updated (e.g. filter remove/added/replaced).
    //!
    //! Is is safe to access the given ILogChannelFilterList from within this method.
    //!
    //! This method is expected to be called concurrently.
    void onUpdate(omni::core::ObjectParam<omni::log::ILogChannelFilterList> list) noexcept;
};

//! Read-only object to encapsulate a channel filter's pattern and effects.
//!
//! A channel filter is a pattern matcher.  If a channel's name matches the pattern, the filter can set both the
//! channel's enabled flag and/or level.
template <>
class omni::core::Generated<omni::log::ILogChannelFilter_abi> : public omni::log::ILogChannelFilter_abi
{
public:
    OMNI_PLUGIN_INTERFACE("omni::log::ILogChannelFilter")

    //! Returns the channels pattern.  The returned memory is valid for the lifetime of this object.
    //!
    //! This method is thread safe.
    const char* getFilter() noexcept;

    //! Returns the desired enabled state for this filter.
    //!
    //! All parameters must not be nullptr.
    //!
    //! If *isUsed is false after calling this method, *isEnabled and *behavior should not be used.
    //!
    //! This method is thread safe.
    void getEnabled(bool* isEnabled, omni::log::SettingBehavior* behavior, bool* isUsed) noexcept;

    //! Returns the desired level for this filter.
    //!
    //! All parameters must not be nullptr.
    //!
    //! If *isUsed is false after calling this method, *level and *behavior should not be used.
    //!
    //! This method is thread safe.
    void getLevel(omni::log::Level* level, omni::log::SettingBehavior* behavior, bool* isUsed) noexcept;

    //! Given a channel name, returns if the channel name matches the filter's pattern.
    //!
    //! The matching algorithm used is implementation specific (e.g. regex, glob, etc).
    //!
    //! This method is thread safe.
    bool isMatch(const char* channel) noexcept;
};

//! A list of channel filters that will be applied as channels are added to the log.
//!
//! This object is a list of ILogChannelFilter objects.  Filters can be added, removed, and replaced.
//!
//! This object can be attached to one or more ILog objects.  As channels are added to the ILog, this object will apply
//! its filters, thereby setting the new channel's state.
//!
//! If multiple filters match a channel, only the first filter's settings will be applied.
//!
//! This API is thread safe.
template <>
class omni::core::Generated<omni::log::ILogChannelFilterList_abi> : public omni::log::ILogChannelFilterList_abi
{
public:
    OMNI_PLUGIN_INTERFACE("omni::log::ILogChannelFilterList")

    //! Inserts the given filter at the given index.
    //!
    //! Existing filters at and after the given index are moved to the next slot in the list.
    //!
    //! If index is equal to or greater than the number of existing filters, the given filter is added to the end of the
    //! filter list.
    //!
    //! The given filter must not be nullptr.
    //!
    //! This method is thread safe.
    void insert(uint32_t index, omni::core::ObjectParam<omni::log::ILogChannelFilter> filter) noexcept;

    //! Replace the filter at the given index with a new filter.
    //!
    //! oldFilter is the current filter at index while newFilter is the filter to replace the old filter.
    //!
    //! If oldFilter is not currently at index, it is assumed another thread has modified the list.  In this case, this
    //! function does nothing and returns kResultInvalidState.
    //!
    //! oldFilter and newFilter must not be nullptr.
    //!
    //! Returns kResultSuccess if the filter was successfully replaced.
    //!
    //! This method is thread safe.
    omni::core::Result replace(uint32_t index,
                               omni::core::ObjectParam<omni::log::ILogChannelFilter> oldFilter,
                               omni::core::ObjectParam<omni::log::ILogChannelFilter> newFilter) noexcept;

    //! Removes the filter at the given index.
    //!
    //! If filter is not currently at index, it is assumed another thread has modified the list.  In this case, this
    //! function does nothing and returns kResultInvalidState.
    //!
    //! filter must not be nullptr.
    //!
    //! Returns kResultSuccess if the filter was successfully replaced.
    //!
    //! This method is thread safe.
    omni::core::Result remove(uint32_t index, omni::core::ObjectParam<omni::log::ILogChannelFilter> filter) noexcept;

    //! Applies each filter to the given list of channels.
    //!
    //! log must not be nullptr.
    //!
    //! channels is an array of channel names in the given log.  This object will apply all filters to each channel.
    //!
    //! If the channels array is nullptr, this method will call ILog::getChannelNames() to get the list of channels.
    //!
    //! This method is thread safe.
    void apply(omni::core::ObjectParam<omni::log::ILog> log,
               omni::str::IReadOnlyCString* const* channels,
               uint32_t channelsCount) noexcept;

    //! Adds an update consumer to this list.
    //!
    //! This added consumer will be notified each time an filter is added, removed, or replaced in this list.
    //!
    //! The given consumer may be notified in parallel.
    //!
    //! Notifications may be consolidated (i.e. multiple items in the list were updated).
    //!
    //! The given consumer may be notified spuriously.
    //!
    //! consumer must not be nullptr.
    //!
    //! This method is thread safe.
    void addUpdateConsumer(omni::core::ObjectParam<omni::log::ILogChannelFilterListUpdateConsumer> consumer) noexcept;

    //! Removes the given consumer from the internal consumer list.
    //!
    //! This method silently accepts nullptr.
    //!
    //! This method silently accepts consumers that have not been registered with this object.
    //!
    //! Calling ILog::removeOnMessageConsumer() from ILogOnMessageConsumer::onMessage_abi() will lead to undefined
    //! behavior.
    //!
    //! This method is thread safe.
    void removeUpdateConsumer(omni::core::ObjectParam<omni::log::ILogChannelFilterListUpdateConsumer> consumer) noexcept;

    //! Removes all filters from this list.
    //!
    //! This method is thread safe.
    void clear() noexcept;

    //! Adds an update consumer to this list.
    //!
    //! This added consumer will be notified each time an filter is added, removed, or replaced in this list.
    //!
    //! The given consumer may be notified in parallel.
    //!
    //! Notifications may be consolidated (i.e. multiple items in the list were updated).
    //!
    //! The given consumer may be notified spuriously.
    //!
    //! consumer must not be nullptr.
    //!
    //! This method is thread safe.
    omni::core::ObjectPtr<omni::log::ILogChannelFilterListUpdateConsumer> addUpdateConsumer(
        std::function<void(omni::log::ILogChannelFilterList* list)> fun) noexcept;
};

#endif

#ifndef OMNI_BIND_INCLUDE_INTERFACE_DECL

inline void omni::core::Generated<omni::log::ILogChannelFilterListUpdateConsumer_abi>::onUpdate(
    omni::core::ObjectParam<omni::log::ILogChannelFilterList> list) noexcept
{
    onUpdate_abi(list.get());
}

inline const char* omni::core::Generated<omni::log::ILogChannelFilter_abi>::getFilter() noexcept
{
    return getFilter_abi();
}

inline void omni::core::Generated<omni::log::ILogChannelFilter_abi>::getEnabled(bool* isEnabled,
                                                                                omni::log::SettingBehavior* behavior,
                                                                                bool* isUsed) noexcept
{
    getEnabled_abi(isEnabled, behavior, isUsed);
}

inline void omni::core::Generated<omni::log::ILogChannelFilter_abi>::getLevel(omni::log::Level* level,
                                                                              omni::log::SettingBehavior* behavior,
                                                                              bool* isUsed) noexcept
{
    getLevel_abi(level, behavior, isUsed);
}

inline bool omni::core::Generated<omni::log::ILogChannelFilter_abi>::isMatch(const char* channel) noexcept
{
    return isMatch_abi(channel);
}

inline void omni::core::Generated<omni::log::ILogChannelFilterList_abi>::insert(
    uint32_t index, omni::core::ObjectParam<omni::log::ILogChannelFilter> filter) noexcept
{
    insert_abi(index, filter.get());
}

inline omni::core::Result omni::core::Generated<omni::log::ILogChannelFilterList_abi>::replace(
    uint32_t index,
    omni::core::ObjectParam<omni::log::ILogChannelFilter> oldFilter,
    omni::core::ObjectParam<omni::log::ILogChannelFilter> newFilter) noexcept
{
    return replace_abi(index, oldFilter.get(), newFilter.get());
}

inline omni::core::Result omni::core::Generated<omni::log::ILogChannelFilterList_abi>::remove(
    uint32_t index, omni::core::ObjectParam<omni::log::ILogChannelFilter> filter) noexcept
{
    return remove_abi(index, filter.get());
}

inline void omni::core::Generated<omni::log::ILogChannelFilterList_abi>::apply(
    omni::core::ObjectParam<omni::log::ILog> log, omni::str::IReadOnlyCString* const* channels, uint32_t channelsCount) noexcept
{
    apply_abi(log.get(), channels, channelsCount);
}

inline void omni::core::Generated<omni::log::ILogChannelFilterList_abi>::addUpdateConsumer(
    omni::core::ObjectParam<omni::log::ILogChannelFilterListUpdateConsumer> consumer) noexcept
{
    addUpdateConsumer_abi(consumer.get());
}

inline void omni::core::Generated<omni::log::ILogChannelFilterList_abi>::removeUpdateConsumer(
    omni::core::ObjectParam<omni::log::ILogChannelFilterListUpdateConsumer> consumer) noexcept
{
    removeUpdateConsumer_abi(consumer.get());
}

inline void omni::core::Generated<omni::log::ILogChannelFilterList_abi>::clear() noexcept
{
    clear_abi();
}

inline omni::core::ObjectPtr<omni::log::ILogChannelFilterListUpdateConsumer> omni::core::Generated<
    omni::log::ILogChannelFilterList_abi>::addUpdateConsumer(std::function<void(omni::log::ILogChannelFilterList* list)> fun) noexcept
{

    class Consumer : public omni::core::Implements<omni::log::ILogChannelFilterListUpdateConsumer>
    {
    public:
        virtual void onUpdate_abi(omni::log::ILogChannelFilterList* list) noexcept override
        {
            m_function(list);
        }

        Consumer(std::function<void(omni::log::ILogChannelFilterList* list)> cb) : m_function(std::move(cb))
        {
        }

    private:
        std::function<void(omni::log::ILogChannelFilterList* list)> m_function;
    };

    auto consumer{ omni::core::steal(new Consumer{ std::move(fun) }) };
    addUpdateConsumer_abi(consumer.get());
    return consumer;
}

#endif

#undef OMNI_BIND_INCLUDE_INTERFACE_DECL
#undef OMNI_BIND_INCLUDE_INTERFACE_IMPL
